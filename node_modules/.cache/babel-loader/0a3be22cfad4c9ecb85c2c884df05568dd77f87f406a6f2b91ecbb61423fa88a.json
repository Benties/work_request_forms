{"ast":null,"code":"// QuickBase API configuration\nconst QB_API_URL = 'https://api.quickbase.com/v1';\n\n// Headers for QuickBase API requests\nconst getHeaders = () => ({\n  'QB-Realm-Hostname': window.QUICKBASE_REALM,\n  'User-Agent': 'QuestionAnswerPlatform/1.0',\n  'Authorization': `QB-USER-TOKEN ${window.QUICKBASE_USER_TOKEN}`,\n  'Content-Type': 'application/json'\n});\n\n// Table IDs - Replace these with your actual QuickBase table IDs\nexport const TABLES = {\n  QUESTIONS: 'buzzze3pn',\n  ANSWERS: 'buzzzhvkj',\n  ATTACHMENTS: 'buz3i82er'\n};\n\n// Field IDs mapping by table\nexport const FIELDS = {\n  QUESTIONS: {\n    RECORD_ID: 3,\n    QUESTION: 6,\n    REQUIRED: 7,\n    FORM_ID: 10\n  },\n  ANSWERS: {\n    RECORD_ID: 3,\n    QUESTION_ID: 10,\n    ANSWER: 6,\n    USER_ID: 7,\n    REQUEST_ID: 12\n  },\n  ATTACHMENTS: {\n    RECORD_ID: 3,\n    ANSWER_ID: 6,\n    FILE_NAME: 7\n  }\n};\n\n// API functions\nexport const api = {\n  // Get all active questions for a specific form\n  getQuestions: async formId => {\n    const response = await fetch(`${QB_API_URL}/records/query`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        from: TABLES.QUESTIONS,\n        select: [FIELDS.QUESTIONS.RECORD_ID, FIELDS.QUESTIONS.QUESTION, FIELDS.QUESTIONS.REQUIRED],\n        where: `{${FIELDS.QUESTIONS.FORM_ID}.EX.'${formId}'}`\n      })\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch questions');\n    }\n    return response.json();\n  },\n  // Get a single question\n  getQuestion: async questionId => {\n    const response = await fetch(`${QB_API_URL}/records/query`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        from: TABLES.QUESTIONS,\n        select: [FIELDS.QUESTIONS.RECORD_ID, FIELDS.QUESTIONS.QUESTION, FIELDS.QUESTIONS.REQUIRED],\n        where: `{${FIELDS.QUESTIONS.RECORD_ID}.EX.'${questionId}'}`\n      })\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch question');\n    }\n    return response.json();\n  },\n  // Get an answer for a specific question and request\n  getAnswer: async (questionId, requestId) => {\n    const response = await fetch(`${QB_API_URL}/records/query`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        from: TABLES.ANSWERS,\n        select: [FIELDS.ANSWERS.RECORD_ID, FIELDS.ANSWERS.ANSWER, FIELDS.ANSWERS.USER_ID, FIELDS.ANSWERS.ATTACHMENT_ID],\n        where: `{${FIELDS.ANSWERS.QUESTION_ID}.EX.'${questionId}'}AND{${FIELDS.ANSWERS.REQUEST_ID}.EX.'${requestId}'}`\n      })\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch answer');\n    }\n    return response.json();\n  },\n  // Save an answer\n  saveAnswer: async (questionId, answer, userId, requestId) => {\n    const response = await fetch(`${QB_API_URL}/records`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        to: TABLES.ANSWERS,\n        data: [{\n          [FIELDS.ANSWERS.QUESTION_ID]: {\n            value: questionId\n          },\n          [FIELDS.ANSWERS.ANSWER]: {\n            value: answer\n          },\n          [FIELDS.ANSWERS.USER_ID]: {\n            value: userId\n          },\n          [FIELDS.ANSWERS.REQUEST_ID]: {\n            value: requestId\n          }\n        }]\n      })\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to save answer');\n    }\n    return response.json();\n  },\n  // Upload an attachment\n  uploadAttachment: async (answerId, file) => {\n    // First, create the attachment record\n    const createResponse = await fetch(`${QB_API_URL}/records`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        to: TABLES.ATTACHMENTS,\n        data: [{\n          [FIELDS.ATTACHMENTS.ANSWER_ID]: {\n            value: answerId\n          },\n          [FIELDS.ATTACHMENTS.FILE_NAME]: {\n            value: file.name\n          }\n        }]\n      })\n    });\n    if (!createResponse.ok) {\n      const error = await createResponse.json();\n      throw new Error(error.message || 'Failed to create attachment record');\n    }\n    const {\n      data: [{\n        record_id\n      }]\n    } = await createResponse.json();\n\n    // Then, upload the file content\n    const fileContent = await file.arrayBuffer();\n    const uploadResponse = await fetch(`${QB_API_URL}/records`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        to: TABLES.ATTACHMENTS,\n        data: [{\n          [FIELDS.ATTACHMENTS.RECORD_ID]: {\n            value: record_id\n          },\n          [FIELDS.ATTACHMENTS.FILE_CONTENT]: {\n            value: fileContent\n          }\n        }]\n      })\n    });\n    if (!uploadResponse.ok) {\n      const error = await uploadResponse.json();\n      throw new Error(error.message || 'Failed to upload file content');\n    }\n    return uploadResponse.json();\n  },\n  // Get user's progress\n  getProgress: async requestId => {\n    const response = await fetch(`${QB_API_URL}/records/query`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        from: TABLES.ANSWERS,\n        select: [FIELDS.ANSWERS.ANSWER, FIELDS.ANSWERS.QUESTION_ID],\n        where: `{${FIELDS.ANSWERS.REQUEST_ID}.EX.'${requestId}'}`\n      })\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch progress');\n    }\n    return response.json();\n  },\n  // Update an existing answer\n  updateAnswer: async (answerId, answer, userId, requestId) => {\n    const response = await fetch(`${QB_API_URL}/records`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        to: TABLES.ANSWERS,\n        data: [{\n          [FIELDS.ANSWERS.RECORD_ID]: {\n            value: answerId\n          },\n          [FIELDS.ANSWERS.ANSWER]: {\n            value: answer\n          },\n          [FIELDS.ANSWERS.USER_ID]: {\n            value: userId\n          },\n          [FIELDS.ANSWERS.REQUEST_ID]: {\n            value: requestId\n          }\n        }]\n      })\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to update answer');\n    }\n    return response.json();\n  }\n};","map":{"version":3,"names":["QB_API_URL","getHeaders","window","QUICKBASE_REALM","QUICKBASE_USER_TOKEN","TABLES","QUESTIONS","ANSWERS","ATTACHMENTS","FIELDS","RECORD_ID","QUESTION","REQUIRED","FORM_ID","QUESTION_ID","ANSWER","USER_ID","REQUEST_ID","ANSWER_ID","FILE_NAME","api","getQuestions","formId","response","fetch","method","headers","body","JSON","stringify","from","select","where","ok","error","json","Error","message","getQuestion","questionId","getAnswer","requestId","ATTACHMENT_ID","saveAnswer","answer","userId","to","data","value","uploadAttachment","answerId","file","createResponse","name","record_id","fileContent","arrayBuffer","uploadResponse","FILE_CONTENT","getProgress","updateAnswer"],"sources":["/home/ben/lighthouse/work_requsts/frontend/src/config/quickbase.ts"],"sourcesContent":["// QuickBase API configuration\nconst QB_API_URL = 'https://api.quickbase.com/v1';\n\n// Headers for QuickBase API requests\nconst getHeaders = () => ({\n  'QB-Realm-Hostname': window.QUICKBASE_REALM,\n  'User-Agent': 'QuestionAnswerPlatform/1.0',\n  'Authorization': `QB-USER-TOKEN ${window.QUICKBASE_USER_TOKEN}`,\n  'Content-Type': 'application/json'\n});\n\n// Table IDs - Replace these with your actual QuickBase table IDs\nexport const TABLES = {\n  QUESTIONS: 'buzzze3pn',\n  ANSWERS: 'buzzzhvkj',\n  ATTACHMENTS: 'buz3i82er'\n};\n\n// Field IDs mapping by table\nexport const FIELDS = {\n  QUESTIONS: {\n    RECORD_ID: 3,\n    QUESTION: 6,\n    REQUIRED: 7,\n    FORM_ID: 10\n  },\n  ANSWERS: {\n    RECORD_ID: 3,\n    QUESTION_ID: 10,\n    ANSWER: 6,\n    USER_ID: 7,\n    REQUEST_ID: 12,\n  },\n  ATTACHMENTS: {\n    RECORD_ID: 3,\n    ANSWER_ID: 6,\n    FILE_NAME: 7,\n  }\n};\n\n// API functions\nexport const api = {\n  // Get all active questions for a specific form\n  getQuestions: async (formId: string) => {\n    const response = await fetch(`${QB_API_URL}/records/query`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        from: TABLES.QUESTIONS,\n        select: [FIELDS.QUESTIONS.RECORD_ID, FIELDS.QUESTIONS.QUESTION, FIELDS.QUESTIONS.REQUIRED],\n        where: `{${FIELDS.QUESTIONS.FORM_ID}.EX.'${formId}'}`\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch questions');\n    }\n\n    return response.json();\n  },\n\n  // Get a single question\n  getQuestion: async (questionId: string) => {\n    const response = await fetch(`${QB_API_URL}/records/query`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        from: TABLES.QUESTIONS,\n        select: [FIELDS.QUESTIONS.RECORD_ID, FIELDS.QUESTIONS.QUESTION, FIELDS.QUESTIONS.REQUIRED],\n        where: `{${FIELDS.QUESTIONS.RECORD_ID}.EX.'${questionId}'}`\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch question');\n    }\n\n    return response.json();\n  },\n\n  // Get an answer for a specific question and request\n  getAnswer: async (questionId: string, requestId: string) => {\n    const response = await fetch(`${QB_API_URL}/records/query`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        from: TABLES.ANSWERS,\n        select: [FIELDS.ANSWERS.RECORD_ID, FIELDS.ANSWERS.ANSWER, FIELDS.ANSWERS.USER_ID, FIELDS.ANSWERS.ATTACHMENT_ID],\n        where: `{${FIELDS.ANSWERS.QUESTION_ID}.EX.'${questionId}'}AND{${FIELDS.ANSWERS.REQUEST_ID}.EX.'${requestId}'}`\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch answer');\n    }\n\n    return response.json();\n  },\n\n  // Save an answer\n  saveAnswer: async (questionId: string, answer: string, userId: string, requestId: string) => {\n    const response = await fetch(`${QB_API_URL}/records`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        to: TABLES.ANSWERS,\n        data: [{\n          [FIELDS.ANSWERS.QUESTION_ID]: { value: questionId },\n          [FIELDS.ANSWERS.ANSWER]: { value: answer },\n          [FIELDS.ANSWERS.USER_ID]: { value: userId },\n          [FIELDS.ANSWERS.REQUEST_ID]: { value: requestId }\n        }]\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to save answer');\n    }\n\n    return response.json();\n  },\n\n  // Upload an attachment\n  uploadAttachment: async (answerId: string, file: File) => {\n    // First, create the attachment record\n    const createResponse = await fetch(`${QB_API_URL}/records`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        to: TABLES.ATTACHMENTS,\n        data: [{\n          [FIELDS.ATTACHMENTS.ANSWER_ID]: { value: answerId },\n          [FIELDS.ATTACHMENTS.FILE_NAME]: { value: file.name }\n        }]\n      })\n    });\n\n    if (!createResponse.ok) {\n      const error = await createResponse.json();\n      throw new Error(error.message || 'Failed to create attachment record');\n    }\n\n    const { data: [{ record_id }] } = await createResponse.json();\n\n    // Then, upload the file content\n    const fileContent = await file.arrayBuffer();\n    const uploadResponse = await fetch(`${QB_API_URL}/records`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        to: TABLES.ATTACHMENTS,\n        data: [{\n          [FIELDS.ATTACHMENTS.RECORD_ID]: { value: record_id },\n          [FIELDS.ATTACHMENTS.FILE_CONTENT]: { value: fileContent }\n        }]\n      })\n    });\n\n    if (!uploadResponse.ok) {\n      const error = await uploadResponse.json();\n      throw new Error(error.message || 'Failed to upload file content');\n    }\n\n    return uploadResponse.json();\n  },\n\n  // Get user's progress\n  getProgress: async (requestId: string) => {\n    const response = await fetch(`${QB_API_URL}/records/query`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        from: TABLES.ANSWERS,\n        select: [FIELDS.ANSWERS.ANSWER, FIELDS.ANSWERS.QUESTION_ID],\n        where: `{${FIELDS.ANSWERS.REQUEST_ID}.EX.'${requestId}'}`\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch progress');\n    }\n\n    return response.json();\n  },\n\n  // Update an existing answer\n  updateAnswer: async (answerId: string, answer: string, userId: string, requestId: string) => {\n    const response = await fetch(`${QB_API_URL}/records`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        to: TABLES.ANSWERS,\n        data: [{\n          [FIELDS.ANSWERS.RECORD_ID]: { value: answerId },\n          [FIELDS.ANSWERS.ANSWER]: { value: answer },\n          [FIELDS.ANSWERS.USER_ID]: { value: userId },\n          [FIELDS.ANSWERS.REQUEST_ID]: { value: requestId }\n        }]\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to update answer');\n    }\n\n    return response.json();\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}