{"ast":null,"code":"// QuickBase API configuration\nconst QB_API_URL = 'https://api.quickbase.com/v1';\n\n// Headers for QuickBase API requests\nconst getHeaders = () => ({\n  'QB-Realm-Hostname': window.QUICKBASE_REALM,\n  'User-Agent': 'QuestionAnswerPlatform/1.0',\n  'Authorization': `QB-USER-TOKEN ${window.QUICKBASE_USER_TOKEN}`,\n  'Content-Type': 'application/json'\n});\n\n// Table IDs - Replace these with your actual QuickBase table IDs\nexport const TABLES = {\n  QUESTIONS: 'buzzze3pn',\n  ANSWERS: 'buzzzhvkj',\n  ATTACHMENTS: 'buz3i82er'\n};\n\n// Field IDs mapping\nexport const FIELDS = {\n  RECORD_ID: 3,\n  QUESTION: 6,\n  REQUIRED: 7,\n  FORM_ID: 10,\n  ANSWER: 11,\n  ATTACHMENT_ID: 13,\n  QUESTION_ID: 1,\n  USER_ID: 7,\n  REQUEST_ID: 12\n};\n\n// API functions\nexport const api = {\n  // Get all active questions for a specific form\n  getQuestions: async formId => {\n    const response = await fetch(`${QB_API_URL}/records/query`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        from: TABLES.QUESTIONS,\n        select: [FIELDS.RECORD_ID, FIELDS.QUESTION, FIELDS.REQUIRED],\n        where: `{${FIELDS.FORM_ID}.EX.'${formId}'}`\n      })\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch questions');\n    }\n    return response.json();\n  },\n  // Get a single question\n  getQuestion: async questionId => {\n    const response = await fetch(`${QB_API_URL}/records/query`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        from: TABLES.QUESTIONS,\n        select: [FIELDS.RECORD_ID, FIELDS.QUESTION, FIELDS.REQUIRED],\n        where: `{${FIELDS.RECORD_ID}.EX.'${questionId}'}`\n      })\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch question');\n    }\n    return response.json();\n  },\n  // Save an answer\n  saveAnswer: async (questionId, answer, userId, requestId) => {\n    const response = await fetch(`${QB_API_URL}/records`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        to: TABLES.ANSWERS,\n        data: [{\n          \"10\": {\n            value: questionId\n          },\n          // This should be the record ID from the question\n          \"6\": {\n            value: answer\n          },\n          \"7\": {\n            value: userId\n          },\n          \"12\": {\n            value: requestId\n          }\n        }]\n      })\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to save answer');\n    }\n    return response.json();\n  },\n  // Upload an attachment\n  uploadAttachment: async (answerId, file) => {\n    // First, create the attachment record\n    const createResponse = await fetch(`${QB_API_URL}/records`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        to: TABLES.ATTACHMENTS,\n        data: [{\n          answer_id: answerId,\n          file_name: file.name,\n          file_type: file.type,\n          file_size: file.size\n        }]\n      })\n    });\n    if (!createResponse.ok) {\n      const error = await createResponse.json();\n      throw new Error(error.message || 'Failed to create attachment record');\n    }\n    const {\n      data: [{\n        record_id\n      }]\n    } = await createResponse.json();\n\n    // Then, upload the file content\n    const fileContent = await file.arrayBuffer();\n    const uploadResponse = await fetch(`${QB_API_URL}/records`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        to: TABLES.ATTACHMENTS,\n        data: [{\n          record_id,\n          file_content: fileContent\n        }]\n      })\n    });\n    if (!uploadResponse.ok) {\n      const error = await uploadResponse.json();\n      throw new Error(error.message || 'Failed to upload file content');\n    }\n    return uploadResponse.json();\n  },\n  // Get user's progress\n  getProgress: async requestId => {\n    const response = await fetch(`${QB_API_URL}/records/query`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        from: TABLES.ANSWERS,\n        select: [6, 10],\n        where: `{12.EX.'${requestId}'}`\n      })\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch progress');\n    }\n    return response.json();\n  },\n  // Get an answer for a specific question, user, and request\n  getAnswer: async (questionId, userId, requestId) => {\n    const response = await fetch(`${QB_API_URL}/records/query`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        from: TABLES.ANSWERS,\n        select: [FIELDS.RECORD_ID, FIELDS.ANSWER, FIELDS.ATTACHMENT_ID],\n        where: `{${FIELDS.QUESTION_ID}.EX.'${questionId}'}AND{${FIELDS.USER_ID}.EX.'${userId}'}AND{${FIELDS.REQUEST_ID}.EX.'${requestId}'}`\n      })\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch answer');\n    }\n    return response.json();\n  },\n  // Update an existing answer\n  updateAnswer: async (answerId, answer, userId, requestId) => {\n    const response = await fetch(`${QB_API_URL}/records`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        to: TABLES.ANSWERS,\n        data: [{\n          record_id: answerId,\n          [FIELDS.ANSWER]: answer,\n          [FIELDS.USER_ID]: userId,\n          [FIELDS.REQUEST_ID]: requestId\n        }]\n      })\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to update answer');\n    }\n    return response.json();\n  }\n};","map":{"version":3,"names":["QB_API_URL","getHeaders","window","QUICKBASE_REALM","QUICKBASE_USER_TOKEN","TABLES","QUESTIONS","ANSWERS","ATTACHMENTS","FIELDS","RECORD_ID","QUESTION","REQUIRED","FORM_ID","ANSWER","ATTACHMENT_ID","QUESTION_ID","USER_ID","REQUEST_ID","api","getQuestions","formId","response","fetch","method","headers","body","JSON","stringify","from","select","where","ok","error","json","Error","message","getQuestion","questionId","saveAnswer","answer","userId","requestId","to","data","value","uploadAttachment","answerId","file","createResponse","answer_id","file_name","name","file_type","type","file_size","size","record_id","fileContent","arrayBuffer","uploadResponse","file_content","getProgress","getAnswer","updateAnswer"],"sources":["/home/ben/lighthouse/work_requsts/frontend/src/config/quickbase.ts"],"sourcesContent":["// QuickBase API configuration\nconst QB_API_URL = 'https://api.quickbase.com/v1';\n\n// Headers for QuickBase API requests\nconst getHeaders = () => ({\n  'QB-Realm-Hostname': window.QUICKBASE_REALM,\n  'User-Agent': 'QuestionAnswerPlatform/1.0',\n  'Authorization': `QB-USER-TOKEN ${window.QUICKBASE_USER_TOKEN}`,\n  'Content-Type': 'application/json'\n});\n\n// Table IDs - Replace these with your actual QuickBase table IDs\nexport const TABLES = {\n  QUESTIONS: 'buzzze3pn',\n  ANSWERS: 'buzzzhvkj',\n  ATTACHMENTS: 'buz3i82er'\n};\n\n// Field IDs mapping\nexport const FIELDS = {\n  RECORD_ID: 3,\n  QUESTION: 6,\n  REQUIRED: 7,\n  FORM_ID: 10,\n  ANSWER: 11,\n  ATTACHMENT_ID: 13,\n  QUESTION_ID: 1,\n  USER_ID: 7,\n  REQUEST_ID: 12\n};\n\n// API functions\nexport const api = {\n  // Get all active questions for a specific form\n  getQuestions: async (formId: string) => {\n    const response = await fetch(`${QB_API_URL}/records/query`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        from: TABLES.QUESTIONS,\n        select: [FIELDS.RECORD_ID, FIELDS.QUESTION, FIELDS.REQUIRED],\n        where: `{${FIELDS.FORM_ID}.EX.'${formId}'}`\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch questions');\n    }\n\n    return response.json();\n  },\n\n  // Get a single question\n  getQuestion: async (questionId: string) => {\n    const response = await fetch(`${QB_API_URL}/records/query`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        from: TABLES.QUESTIONS,\n        select: [FIELDS.RECORD_ID, FIELDS.QUESTION, FIELDS.REQUIRED],\n        where: `{${FIELDS.RECORD_ID}.EX.'${questionId}'}`\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch question');\n    }\n\n    return response.json();\n  },\n\n  // Save an answer\n  saveAnswer: async (questionId: string, answer: string, userId: string, requestId: string) => {\n    const response = await fetch(`${QB_API_URL}/records`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        to: TABLES.ANSWERS,\n        data: [{\n          \"10\": {value: questionId}, // This should be the record ID from the question\n          \"6\": {value: answer},\n          \"7\": {value: userId},\n          \"12\": {value: requestId},\n        }]\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to save answer');\n    }\n\n    return response.json();\n  },\n\n  // Upload an attachment\n  uploadAttachment: async (answerId: string, file: File) => {\n    // First, create the attachment record\n    const createResponse = await fetch(`${QB_API_URL}/records`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        to: TABLES.ATTACHMENTS,\n        data: [{\n          answer_id: answerId,\n          file_name: file.name,\n          file_type: file.type,\n          file_size: file.size\n        }]\n      })\n    });\n\n    if (!createResponse.ok) {\n      const error = await createResponse.json();\n      throw new Error(error.message || 'Failed to create attachment record');\n    }\n\n    const { data: [{ record_id }] } = await createResponse.json();\n\n    // Then, upload the file content\n    const fileContent = await file.arrayBuffer();\n    const uploadResponse = await fetch(`${QB_API_URL}/records`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        to: TABLES.ATTACHMENTS,\n        data: [{\n          record_id,\n          file_content: fileContent\n        }]\n      })\n    });\n\n    if (!uploadResponse.ok) {\n      const error = await uploadResponse.json();\n      throw new Error(error.message || 'Failed to upload file content');\n    }\n\n    return uploadResponse.json();\n  },\n\n  // Get user's progress\n  getProgress: async (requestId: string) => {\n    const response = await fetch(`${QB_API_URL}/records/query`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        from: TABLES.ANSWERS,\n        select: [6, 10],\n        where: `{12.EX.'${requestId}'}`\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch progress');\n    }\n\n    return response.json();\n  },\n\n  // Get an answer for a specific question, user, and request\n  getAnswer: async (questionId: string, userId: string, requestId: string) => {\n    const response = await fetch(`${QB_API_URL}/records/query`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        from: TABLES.ANSWERS,\n        select: [FIELDS.RECORD_ID, FIELDS.ANSWER, FIELDS.ATTACHMENT_ID],\n        where: `{${FIELDS.QUESTION_ID}.EX.'${questionId}'}AND{${FIELDS.USER_ID}.EX.'${userId}'}AND{${FIELDS.REQUEST_ID}.EX.'${requestId}'}`\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch answer');\n    }\n\n    return response.json();\n  },\n\n  // Update an existing answer\n  updateAnswer: async (answerId: string, answer: string, userId: string, requestId: string) => {\n    const response = await fetch(`${QB_API_URL}/records`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        to: TABLES.ANSWERS,\n        data: [{\n          record_id: answerId,\n          [FIELDS.ANSWER]: answer,\n          [FIELDS.USER_ID]: userId,\n          [FIELDS.REQUEST_ID]: requestId\n        }]\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to update answer');\n    }\n\n    return response.json();\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}