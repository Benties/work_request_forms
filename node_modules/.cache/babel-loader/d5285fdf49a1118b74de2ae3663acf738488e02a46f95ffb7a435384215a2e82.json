{"ast":null,"code":"// QuickBase configuration\nexport const QB_BASE_URL = 'https://srf.quickbase.com/db/buzzytkvg';\nconst QB_API_URL = 'https://api.quickbase.com/v1';\n\n// QuickBase API headers\nconst headers = {\n  'QB-Realm-Hostname': 'srf.quickbase.com',\n  'Authorization': 'QB-USER-TOKEN YOUR_USER_TOKEN_HERE',\n  'Content-Type': 'application/json'\n};\n\n// Table IDs\nconst TABLES = {\n  QUESTIONS: 'bupzji6yk',\n  ANSWERS: 'bupzji6yl',\n  ATTACHMENTS: 'bupzji6ym'\n};\n\n// Field IDs\nconst FIELDS = {\n  QUESTIONS: {\n    RECORD_ID: 3,\n    QUESTION: 6,\n    REQUIRED: 7\n  },\n  ANSWERS: {\n    RECORD_ID: 3,\n    QUESTION_ID: 6,\n    ANSWER: 7,\n    USER_EMAIL: 8\n  },\n  ATTACHMENTS: {\n    RECORD_ID: 3,\n    ANSWER_ID: 6,\n    FILE_ATTACHMENT: 7\n  }\n};\n\n// Types for file attachment data\n\n// API functions\nexport const api = {\n  // Get all active questions for a specific form\n  getQuestions: async formId => {\n    const response = await fetch(`${QB_API_URL}/records/query`, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify({\n        from: TABLES.QUESTIONS,\n        select: [FIELDS.QUESTIONS.RECORD_ID, FIELDS.QUESTIONS.QUESTION, FIELDS.QUESTIONS.REQUIRED],\n        where: `{${FIELDS.QUESTIONS.FORM_ID}.EX.'${formId}'}`\n      })\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch questions');\n    }\n    return response.json();\n  },\n  // Get a single question\n  getQuestion: async questionId => {\n    const response = await fetch(`${QB_API_URL}/records/query`, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify({\n        from: TABLES.QUESTIONS,\n        select: [FIELDS.QUESTIONS.RECORD_ID, FIELDS.QUESTIONS.QUESTION, FIELDS.QUESTIONS.REQUIRED],\n        where: `{${FIELDS.QUESTIONS.RECORD_ID}.EX.'${questionId}'}`\n      })\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch question');\n    }\n    return response.json();\n  },\n  // Get an answer for a specific question and request\n  getAnswer: async (questionId, requestId) => {\n    const response = await fetch(`${QB_API_URL}/records/query`, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify({\n        from: TABLES.ANSWERS,\n        select: [FIELDS.ANSWERS.RECORD_ID, FIELDS.ANSWERS.ANSWER, FIELDS.ANSWERS.USER_EMAIL, FIELDS.ANSWERS.USER_ID],\n        where: `{${FIELDS.ANSWERS.QUESTION_ID}.EX.'${questionId}'}AND{${FIELDS.ANSWERS.REQUEST_ID}.EX.'${requestId}'}`\n      })\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch answer');\n    }\n    return response.json();\n  },\n  // Save an answer\n  saveAnswer: async (questionId, answer, userId, requestId) => {\n    const response = await fetch(`${QB_API_URL}/records`, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify({\n        to: TABLES.ANSWERS,\n        data: [{\n          [FIELDS.ANSWERS.QUESTION_ID]: {\n            value: questionId\n          },\n          [FIELDS.ANSWERS.ANSWER]: {\n            value: answer\n          },\n          [FIELDS.ANSWERS.USER_ID]: {\n            value: userId\n          },\n          [FIELDS.ANSWERS.REQUEST_ID]: {\n            value: requestId\n          }\n        }]\n      })\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to save answer');\n    }\n    return response.json();\n  },\n  // Upload an attachment\n  uploadAttachment: async (answerId, file) => {\n    // First, create the attachment record\n    const createResponse = await fetch(`${QB_API_URL}/records`, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify({\n        to: TABLES.ATTACHMENTS,\n        data: [{\n          [FIELDS.ATTACHMENTS.ANSWER_ID]: {\n            value: answerId\n          },\n          [FIELDS.ATTACHMENTS.FILE_NAME]: {\n            value: file.name\n          }\n        }]\n      })\n    });\n    if (!createResponse.ok) {\n      const error = await createResponse.json();\n      throw new Error(error.message || 'Failed to create attachment record');\n    }\n    const {\n      data: [{\n        record_id\n      }]\n    } = await createResponse.json();\n\n    // Then, upload the file content\n    const fileContent = await file.arrayBuffer();\n    const uploadResponse = await fetch(`${QB_API_URL}/records`, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify({\n        to: TABLES.ATTACHMENTS,\n        data: [{\n          [FIELDS.ATTACHMENTS.RECORD_ID]: {\n            value: record_id\n          },\n          [FIELDS.ATTACHMENTS.FILE_CONTENT]: {\n            value: fileContent\n          }\n        }]\n      })\n    });\n    if (!uploadResponse.ok) {\n      const error = await uploadResponse.json();\n      throw new Error(error.message || 'Failed to upload file content');\n    }\n    return uploadResponse.json();\n  },\n  // Get user's progress\n  getProgress: async requestId => {\n    const response = await fetch(`${QB_API_URL}/records/query`, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify({\n        from: TABLES.ANSWERS,\n        select: [FIELDS.ANSWERS.ANSWER, FIELDS.ANSWERS.QUESTION_ID],\n        where: `{${FIELDS.ANSWERS.REQUEST_ID}.EX.'${requestId}'}`\n      })\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch progress');\n    }\n    return response.json();\n  },\n  // Update an existing answer\n  updateAnswer: async (answerId, answer, userId, requestId) => {\n    const response = await fetch(`${QB_API_URL}/records`, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify({\n        to: TABLES.ANSWERS,\n        data: [{\n          [FIELDS.ANSWERS.RECORD_ID]: {\n            value: answerId\n          },\n          [FIELDS.ANSWERS.ANSWER]: {\n            value: answer\n          },\n          [FIELDS.ANSWERS.USER_ID]: {\n            value: userId\n          },\n          [FIELDS.ANSWERS.REQUEST_ID]: {\n            value: requestId\n          }\n        }]\n      })\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to update answer');\n    }\n    return response.json();\n  },\n  // Get file attachment\n  getFileAttachment: async recordId => {\n    try {\n      const response = await fetch(`${QB_API_URL}/records/${TABLES.ATTACHMENTS}/${recordId}`, {\n        method: 'GET',\n        headers\n      });\n      if (!response.ok) throw new Error('Failed to fetch file attachment');\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching file attachment:', error);\n      throw error;\n    }\n  },\n  // Upload file attachment\n  uploadFileAttachment: async (answerId, fileName, fileContent) => {\n    try {\n      const data = {\n        value: {\n          fileName,\n          data: fileContent // Base64 encoded content\n        }\n      };\n      const response = await fetch(`${QB_API_URL}/records/${TABLES.ATTACHMENTS}`, {\n        method: 'POST',\n        headers,\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) throw new Error('Failed to upload file attachment');\n    } catch (error) {\n      console.error('Error uploading file attachment:', error);\n      throw error;\n    }\n  },\n  // Download file attachment\n  downloadFileAttachment: async url => {\n    try {\n      var _contentDisposition$s;\n      const response = await fetch(`${QB_BASE_URL}${url}`, {\n        method: 'GET',\n        headers\n      });\n      if (!response.ok) throw new Error('Failed to download file attachment');\n      const contentDisposition = response.headers.get('Content-Disposition');\n      const fileName = (contentDisposition === null || contentDisposition === void 0 ? void 0 : (_contentDisposition$s = contentDisposition.split('filename=')[1]) === null || _contentDisposition$s === void 0 ? void 0 : _contentDisposition$s.replace(/\"/g, '')) || 'downloaded_file';\n      const content = await response.text(); // Base64 encoded content\n      return {\n        fileName,\n        content\n      };\n    } catch (error) {\n      console.error('Error downloading file attachment:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["QB_BASE_URL","QB_API_URL","headers","TABLES","QUESTIONS","ANSWERS","ATTACHMENTS","FIELDS","RECORD_ID","QUESTION","REQUIRED","QUESTION_ID","ANSWER","USER_EMAIL","ANSWER_ID","FILE_ATTACHMENT","api","getQuestions","formId","response","fetch","method","body","JSON","stringify","from","select","where","FORM_ID","ok","error","json","Error","message","getQuestion","questionId","getAnswer","requestId","USER_ID","REQUEST_ID","saveAnswer","answer","userId","to","data","value","uploadAttachment","answerId","file","createResponse","FILE_NAME","name","record_id","fileContent","arrayBuffer","uploadResponse","FILE_CONTENT","getProgress","updateAnswer","getFileAttachment","recordId","console","uploadFileAttachment","fileName","downloadFileAttachment","url","_contentDisposition$s","contentDisposition","get","split","replace","content","text"],"sources":["/home/ben/lighthouse/work_requsts/frontend/src/config/quickbase.ts"],"sourcesContent":["// QuickBase configuration\nexport const QB_BASE_URL = 'https://srf.quickbase.com/db/buzzytkvg';\nconst QB_API_URL = 'https://api.quickbase.com/v1';\n\n// QuickBase API headers\nconst headers = {\n  'QB-Realm-Hostname': 'srf.quickbase.com',\n  'Authorization': 'QB-USER-TOKEN YOUR_USER_TOKEN_HERE',\n  'Content-Type': 'application/json'\n};\n\n// Table IDs\nconst TABLES = {\n  QUESTIONS: 'bupzji6yk',\n  ANSWERS: 'bupzji6yl',\n  ATTACHMENTS: 'bupzji6ym'\n};\n\n// Field IDs\nconst FIELDS = {\n  QUESTIONS: {\n    RECORD_ID: 3,\n    QUESTION: 6,\n    REQUIRED: 7\n  },\n  ANSWERS: {\n    RECORD_ID: 3,\n    QUESTION_ID: 6,\n    ANSWER: 7,\n    USER_EMAIL: 8\n  },\n  ATTACHMENTS: {\n    RECORD_ID: 3,\n    ANSWER_ID: 6,\n    FILE_ATTACHMENT: 7\n  }\n};\n\n// Types for file attachment data\ninterface FileVersion {\n  versionNumber: number;\n  fileName: string;\n  uploaded: string;\n  creator: {\n    email: string;\n    id: string;\n    name: string;\n    userName: string;\n  };\n}\n\ninterface FileAttachment {\n  url: string;\n  reservedBy?: {\n    email: string;\n    id: string;\n    name: string;\n    userName: string;\n  };\n  versions: FileVersion[];\n}\n\ninterface FileAttachmentValue {\n  value: FileAttachment;\n}\n\ninterface FileUploadValue {\n  value: {\n    fileName: string;\n    data: string; // Base64 encoded content\n  };\n}\n\n// API functions\nexport const api = {\n  // Get all active questions for a specific form\n  getQuestions: async (formId: string) => {\n    const response = await fetch(`${QB_API_URL}/records/query`, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify({\n        from: TABLES.QUESTIONS,\n        select: [FIELDS.QUESTIONS.RECORD_ID, FIELDS.QUESTIONS.QUESTION, FIELDS.QUESTIONS.REQUIRED],\n        where: `{${FIELDS.QUESTIONS.FORM_ID}.EX.'${formId}'}`\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch questions');\n    }\n\n    return response.json();\n  },\n\n  // Get a single question\n  getQuestion: async (questionId: string) => {\n    const response = await fetch(`${QB_API_URL}/records/query`, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify({\n        from: TABLES.QUESTIONS,\n        select: [FIELDS.QUESTIONS.RECORD_ID, FIELDS.QUESTIONS.QUESTION, FIELDS.QUESTIONS.REQUIRED],\n        where: `{${FIELDS.QUESTIONS.RECORD_ID}.EX.'${questionId}'}`\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch question');\n    }\n\n    return response.json();\n  },\n\n  // Get an answer for a specific question and request\n  getAnswer: async (questionId: string, requestId: string) => {\n    const response = await fetch(`${QB_API_URL}/records/query`, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify({\n        from: TABLES.ANSWERS,\n        select: [FIELDS.ANSWERS.RECORD_ID, FIELDS.ANSWERS.ANSWER, FIELDS.ANSWERS.USER_EMAIL, FIELDS.ANSWERS.USER_ID],\n        where: `{${FIELDS.ANSWERS.QUESTION_ID}.EX.'${questionId}'}AND{${FIELDS.ANSWERS.REQUEST_ID}.EX.'${requestId}'}`\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch answer');\n    }\n\n    return response.json();\n  },\n\n  // Save an answer\n  saveAnswer: async (questionId: string, answer: string, userId: string, requestId: string) => {\n    const response = await fetch(`${QB_API_URL}/records`, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify({\n        to: TABLES.ANSWERS,\n        data: [{\n          [FIELDS.ANSWERS.QUESTION_ID]: { value: questionId },\n          [FIELDS.ANSWERS.ANSWER]: { value: answer },\n          [FIELDS.ANSWERS.USER_ID]: { value: userId },\n          [FIELDS.ANSWERS.REQUEST_ID]: { value: requestId }\n        }]\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to save answer');\n    }\n\n    return response.json();\n  },\n\n  // Upload an attachment\n  uploadAttachment: async (answerId: string, file: File) => {\n    // First, create the attachment record\n    const createResponse = await fetch(`${QB_API_URL}/records`, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify({\n        to: TABLES.ATTACHMENTS,\n        data: [{\n          [FIELDS.ATTACHMENTS.ANSWER_ID]: { value: answerId },\n          [FIELDS.ATTACHMENTS.FILE_NAME]: { value: file.name }\n        }]\n      })\n    });\n\n    if (!createResponse.ok) {\n      const error = await createResponse.json();\n      throw new Error(error.message || 'Failed to create attachment record');\n    }\n\n    const { data: [{ record_id }] } = await createResponse.json();\n\n    // Then, upload the file content\n    const fileContent = await file.arrayBuffer();\n    const uploadResponse = await fetch(`${QB_API_URL}/records`, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify({\n        to: TABLES.ATTACHMENTS,\n        data: [{\n          [FIELDS.ATTACHMENTS.RECORD_ID]: { value: record_id },\n          [FIELDS.ATTACHMENTS.FILE_CONTENT]: { value: fileContent }\n        }]\n      })\n    });\n\n    if (!uploadResponse.ok) {\n      const error = await uploadResponse.json();\n      throw new Error(error.message || 'Failed to upload file content');\n    }\n\n    return uploadResponse.json();\n  },\n\n  // Get user's progress\n  getProgress: async (requestId: string) => {\n    const response = await fetch(`${QB_API_URL}/records/query`, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify({\n        from: TABLES.ANSWERS,\n        select: [FIELDS.ANSWERS.ANSWER, FIELDS.ANSWERS.QUESTION_ID],\n        where: `{${FIELDS.ANSWERS.REQUEST_ID}.EX.'${requestId}'}`\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch progress');\n    }\n\n    return response.json();\n  },\n\n  // Update an existing answer\n  updateAnswer: async (answerId: string, answer: string, userId: string, requestId: string) => {\n    const response = await fetch(`${QB_API_URL}/records`, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify({\n        to: TABLES.ANSWERS,\n        data: [{\n          [FIELDS.ANSWERS.RECORD_ID]: { value: answerId },\n          [FIELDS.ANSWERS.ANSWER]: { value: answer },\n          [FIELDS.ANSWERS.USER_ID]: { value: userId },\n          [FIELDS.ANSWERS.REQUEST_ID]: { value: requestId }\n        }]\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to update answer');\n    }\n\n    return response.json();\n  },\n\n  // Get file attachment\n  getFileAttachment: async (recordId: number): Promise<FileAttachmentValue> => {\n    try {\n      const response = await fetch(`${QB_API_URL}/records/${TABLES.ATTACHMENTS}/${recordId}`, {\n        method: 'GET',\n        headers\n      });\n      if (!response.ok) throw new Error('Failed to fetch file attachment');\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching file attachment:', error);\n      throw error;\n    }\n  },\n\n  // Upload file attachment\n  uploadFileAttachment: async (answerId: number, fileName: string, fileContent: string): Promise<void> => {\n    try {\n      const data: FileUploadValue = {\n        value: {\n          fileName,\n          data: fileContent // Base64 encoded content\n        }\n      };\n\n      const response = await fetch(`${QB_API_URL}/records/${TABLES.ATTACHMENTS}`, {\n        method: 'POST',\n        headers,\n        body: JSON.stringify(data)\n      });\n\n      if (!response.ok) throw new Error('Failed to upload file attachment');\n    } catch (error) {\n      console.error('Error uploading file attachment:', error);\n      throw error;\n    }\n  },\n\n  // Download file attachment\n  downloadFileAttachment: async (url: string): Promise<{ fileName: string; content: string }> => {\n    try {\n      const response = await fetch(`${QB_BASE_URL}${url}`, {\n        method: 'GET',\n        headers\n      });\n\n      if (!response.ok) throw new Error('Failed to download file attachment');\n\n      const contentDisposition = response.headers.get('Content-Disposition');\n      const fileName = contentDisposition?.split('filename=')[1]?.replace(/\"/g, '') || 'downloaded_file';\n\n      const content = await response.text(); // Base64 encoded content\n      return { fileName, content };\n    } catch (error) {\n      console.error('Error downloading file attachment:', error);\n      throw error;\n    }\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}