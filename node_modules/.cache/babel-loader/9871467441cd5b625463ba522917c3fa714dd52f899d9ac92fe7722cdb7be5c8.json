{"ast":null,"code":"var _jsxFileName = \"/home/ben/lighthouse/work_requsts/frontend/src/components/QuestionList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { List, ListItem, ListItemText, ListItemButton, Typography, Paper, CircularProgress, Box, Alert, Chip } from '@mui/material';\nimport { api } from '../config/quickbase.ts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionList = () => {\n  _s();\n  const [searchParams] = useSearchParams();\n  const userId = searchParams.get('userId');\n  const requestId = searchParams.get('requestId');\n  const formId = searchParams.get('formId');\n  const [questions, setQuestions] = useState([]);\n  const [answers, setAnswers] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!userId || !requestId || !formId) {\n        setError('Missing required parameters: userId, requestId, or formId');\n        setLoading(false);\n        return;\n      }\n      try {\n        // Fetch questions\n        const questionsResponse = await api.getQuestions(formId);\n        setQuestions(questionsResponse.data);\n\n        // Fetch answers for all questions\n        const answersMap = {};\n        for (const question of questionsResponse.data) {\n          const questionId = String(question[3].value);\n          const answerResponse = await api.getAnswer(questionId, userId, requestId);\n          if (answerResponse.data && answerResponse.data.length > 0) {\n            answersMap[questionId] = answerResponse.data[0];\n          }\n        }\n        setAnswers(answersMap);\n      } catch (error) {\n        setError('Failed to fetch data');\n        console.error('Error fetching data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [userId, requestId, formId]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      minHeight: \"200px\",\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 2\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    elevation: 3,\n    sx: {\n      p: 2\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      gutterBottom: true,\n      children: \"Questions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      children: questions.map(question => {\n        const questionId = String(question[3].value);\n        const hasAnswer = answers[questionId] !== undefined;\n        return /*#__PURE__*/_jsxDEV(ListItem, {\n          disablePadding: true,\n          children: /*#__PURE__*/_jsxDEV(ListItemButton, {\n            onClick: () => navigate(`/question/${questionId}?userId=${userId}&requestId=${requestId}&formId=${formId}`),\n            children: /*#__PURE__*/_jsxDEV(ListItemText, {\n              primary: String(question[6].value),\n              secondary: /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: 'flex',\n                  alignItems: 'center',\n                  gap: 1\n                },\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  color: \"text.secondary\",\n                  children: [\"Required: \", question[7].value ? 'Yes' : 'No']\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 109,\n                  columnNumber: 23\n                }, this), hasAnswer && /*#__PURE__*/_jsxDEV(Chip, {\n                  label: \"Answered\",\n                  color: \"success\",\n                  size: \"small\",\n                  variant: \"outlined\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 113,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this)\n        }, questionId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(QuestionList, \"YiafbAhfUbGW4Ewl+CY9eaCiHHU=\", false, function () {\n  return [useSearchParams, useNavigate];\n});\n_c = QuestionList;\nexport default QuestionList;\nvar _c;\n$RefreshReg$(_c, \"QuestionList\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useSearchParams","List","ListItem","ListItemText","ListItemButton","Typography","Paper","CircularProgress","Box","Alert","Chip","api","jsxDEV","_jsxDEV","QuestionList","_s","searchParams","userId","get","requestId","formId","questions","setQuestions","answers","setAnswers","loading","setLoading","error","setError","navigate","fetchData","questionsResponse","getQuestions","data","answersMap","question","questionId","String","value","answerResponse","getAnswer","length","console","display","justifyContent","alignItems","minHeight","children","fileName","_jsxFileName","lineNumber","columnNumber","severity","sx","mb","elevation","p","variant","gutterBottom","map","hasAnswer","undefined","disablePadding","onClick","primary","secondary","gap","color","label","size","_c","$RefreshReg$"],"sources":["/home/ben/lighthouse/work_requsts/frontend/src/components/QuestionList.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport {\n  List,\n  ListItem,\n  ListItemText,\n  ListItemButton,\n  Typography,\n  Paper,\n  CircularProgress,\n  Box,\n  Alert,\n  Chip\n} from '@mui/material';\nimport { api } from '../config/quickbase.ts';\n\ninterface QuickBaseField {\n  value: string | boolean;\n}\n\ninterface Question {\n  [key: number]: QuickBaseField;\n}\n\ninterface Answer {\n  [key: number]: QuickBaseField;\n}\n\nconst QuestionList = () => {\n  const [searchParams] = useSearchParams();\n  const userId = searchParams.get('userId');\n  const requestId = searchParams.get('requestId');\n  const formId = searchParams.get('formId');\n  const [questions, setQuestions] = useState<Question[]>([]);\n  const [answers, setAnswers] = useState<Record<string, Answer>>({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!userId || !requestId || !formId) {\n        setError('Missing required parameters: userId, requestId, or formId');\n        setLoading(false);\n        return;\n      }\n\n      try {\n        // Fetch questions\n        const questionsResponse = await api.getQuestions(formId);\n        setQuestions(questionsResponse.data);\n\n        // Fetch answers for all questions\n        const answersMap: Record<string, Answer> = {};\n        for (const question of questionsResponse.data) {\n          const questionId = String(question[3].value);\n          const answerResponse = await api.getAnswer(questionId, userId, requestId);\n          if (answerResponse.data && answerResponse.data.length > 0) {\n            answersMap[questionId] = answerResponse.data[0];\n          }\n        }\n        setAnswers(answersMap);\n      } catch (error) {\n        setError('Failed to fetch data');\n        console.error('Error fetching data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [userId, requestId, formId]);\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"200px\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Alert severity=\"error\" sx={{ mb: 2 }}>\n        {error}\n      </Alert>\n    );\n  }\n\n  return (\n    <Paper elevation={3} sx={{ p: 2 }}>\n      <Typography variant=\"h5\" gutterBottom>\n        Questions\n      </Typography>\n      <List>\n        {questions.map((question) => {\n          const questionId = String(question[3].value);\n          const hasAnswer = answers[questionId] !== undefined;\n\n          return (\n            <ListItem key={questionId} disablePadding>\n              <ListItemButton\n                onClick={() => navigate(`/question/${questionId}?userId=${userId}&requestId=${requestId}&formId=${formId}`)}\n              >\n                <ListItemText\n                  primary={String(question[6].value)}\n                  secondary={\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                      <Typography variant=\"body2\" color=\"text.secondary\">\n                        Required: {question[7].value ? 'Yes' : 'No'}\n                      </Typography>\n                      {hasAnswer && (\n                        <Chip\n                          label=\"Answered\"\n                          color=\"success\"\n                          size=\"small\"\n                          variant=\"outlined\"\n                        />\n                      )}\n                    </Box>\n                  }\n                />\n              </ListItemButton>\n            </ListItem>\n          );\n        })}\n      </List>\n    </Paper>\n  );\n};\n\nexport default QuestionList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}