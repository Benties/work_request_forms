{"ast":null,"code":"var _jsxFileName = \"/home/ben/lighthouse/work_requsts/frontend/src/components/QuestionList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { List, ListItem, ListItemText, ListItemButton, Typography, Paper, CircularProgress, Box, Alert, Divider } from '@mui/material';\nimport { api } from '../config/quickbase.ts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionList = () => {\n  _s();\n  const [searchParams] = useSearchParams();\n  const userId = searchParams.get('userId');\n  const requestId = searchParams.get('requestId');\n  const formId = searchParams.get('formId');\n  const [questions, setQuestions] = useState([]);\n  const [answers, setAnswers] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!requestId || !formId) {\n        setError('Missing required parameters: requestId or formId');\n        setLoading(false);\n        return;\n      }\n      try {\n        // Fetch questions\n        const questionsResponse = await api.getQuestions(formId);\n        setQuestions(questionsResponse.data);\n\n        // Fetch answers for all questions\n        const answersMap = {};\n        for (const question of questionsResponse.data) {\n          const questionId = String(question[FIELDS.QUESTIONS.RECORD_ID].value);\n          const answerResponse = await api.getAnswer(questionId, requestId);\n          if (answerResponse.data && answerResponse.data.length > 0) {\n            answersMap[questionId] = answerResponse.data[0];\n          }\n        }\n        setAnswers(answersMap);\n      } catch (error) {\n        setError('Failed to fetch data');\n        console.error('Error fetching data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [requestId, formId]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      minHeight: \"200px\",\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 2\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    elevation: 3,\n    sx: {\n      p: 2\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      gutterBottom: true,\n      children: \"Questions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      children: questions.map(question => {\n        const questionId = String(question[FIELDS.QUESTIONS.RECORD_ID].value);\n        const hasAnswer = answers[questionId] !== undefined;\n        const isRequired = question[FIELDS.QUESTIONS.REQUIRED].value;\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(ListItem, {\n            disablePadding: true,\n            children: /*#__PURE__*/_jsxDEV(ListItemButton, {\n              onClick: () => navigate(`/question/${questionId}?userId=${userId}&requestId=${requestId}&formId=${formId}`),\n              children: /*#__PURE__*/_jsxDEV(ListItemText, {\n                primary: /*#__PURE__*/_jsxDEV(Box, {\n                  sx: {\n                    display: 'flex',\n                    alignItems: 'center',\n                    gap: 1\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"body1\",\n                    children: String(question[FIELDS.QUESTIONS.QUESTION].value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 111,\n                    columnNumber: 25\n                  }, this), isRequired && /*#__PURE__*/_jsxDEV(Typography, {\n                    color: \"error\",\n                    component: \"span\",\n                    children: \"*\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 115,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 110,\n                  columnNumber: 23\n                }, this),\n                secondary: hasAnswer && /*#__PURE__*/_jsxDEV(Box, {\n                  sx: {\n                    mt: 1\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"body2\",\n                    color: \"text.secondary\",\n                    children: [\"Answer: \", String(answers[questionId][FIELDS.ANSWERS.ANSWER].value)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 122,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"caption\",\n                    color: \"text.secondary\",\n                    children: [\"Answered by: \", String(answers[questionId][FIELDS.ANSWERS.USER_EMAIL].value)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 125,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 121,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }, this)]\n        }, questionId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_s(QuestionList, \"YiafbAhfUbGW4Ewl+CY9eaCiHHU=\", false, function () {\n  return [useSearchParams, useNavigate];\n});\n_c = QuestionList;\nexport default QuestionList;\nvar _c;\n$RefreshReg$(_c, \"QuestionList\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useSearchParams","List","ListItem","ListItemText","ListItemButton","Typography","Paper","CircularProgress","Box","Alert","Divider","api","jsxDEV","_jsxDEV","QuestionList","_s","searchParams","userId","get","requestId","formId","questions","setQuestions","answers","setAnswers","loading","setLoading","error","setError","navigate","fetchData","questionsResponse","getQuestions","data","answersMap","question","questionId","String","FIELDS","QUESTIONS","RECORD_ID","value","answerResponse","getAnswer","length","console","display","justifyContent","alignItems","minHeight","children","fileName","_jsxFileName","lineNumber","columnNumber","severity","sx","mb","elevation","p","variant","gutterBottom","map","hasAnswer","undefined","isRequired","REQUIRED","Fragment","disablePadding","onClick","primary","gap","QUESTION","color","component","secondary","mt","ANSWERS","ANSWER","USER_EMAIL","_c","$RefreshReg$"],"sources":["/home/ben/lighthouse/work_requsts/frontend/src/components/QuestionList.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport {\n  List,\n  ListItem,\n  ListItemText,\n  ListItemButton,\n  Typography,\n  Paper,\n  CircularProgress,\n  Box,\n  Alert,\n  Chip,\n  Divider\n} from '@mui/material';\nimport { api } from '../config/quickbase.ts';\n\ninterface QuickBaseField {\n  value: string | boolean;\n}\n\ninterface Question {\n  [key: number]: QuickBaseField;\n}\n\ninterface Answer {\n  [key: number]: QuickBaseField;\n}\n\nconst QuestionList = () => {\n  const [searchParams] = useSearchParams();\n  const userId = searchParams.get('userId');\n  const requestId = searchParams.get('requestId');\n  const formId = searchParams.get('formId');\n  const [questions, setQuestions] = useState<Question[]>([]);\n  const [answers, setAnswers] = useState<Record<string, Answer>>({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!requestId || !formId) {\n        setError('Missing required parameters: requestId or formId');\n        setLoading(false);\n        return;\n      }\n\n      try {\n        // Fetch questions\n        const questionsResponse = await api.getQuestions(formId);\n        setQuestions(questionsResponse.data);\n\n        // Fetch answers for all questions\n        const answersMap: Record<string, Answer> = {};\n        for (const question of questionsResponse.data) {\n          const questionId = String(question[FIELDS.QUESTIONS.RECORD_ID].value);\n          const answerResponse = await api.getAnswer(questionId, requestId);\n          if (answerResponse.data && answerResponse.data.length > 0) {\n            answersMap[questionId] = answerResponse.data[0];\n          }\n        }\n        setAnswers(answersMap);\n      } catch (error) {\n        setError('Failed to fetch data');\n        console.error('Error fetching data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [requestId, formId]);\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"200px\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Alert severity=\"error\" sx={{ mb: 2 }}>\n        {error}\n      </Alert>\n    );\n  }\n\n  return (\n    <Paper elevation={3} sx={{ p: 2 }}>\n      <Typography variant=\"h5\" gutterBottom>\n        Questions\n      </Typography>\n      <List>\n        {questions.map((question) => {\n          const questionId = String(question[FIELDS.QUESTIONS.RECORD_ID].value);\n          const hasAnswer = answers[questionId] !== undefined;\n          const isRequired = question[FIELDS.QUESTIONS.REQUIRED].value as boolean;\n\n          return (\n            <React.Fragment key={questionId}>\n              <ListItem disablePadding>\n                <ListItemButton\n                  onClick={() => navigate(`/question/${questionId}?userId=${userId}&requestId=${requestId}&formId=${formId}`)}\n                >\n                  <ListItemText\n                    primary={\n                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                        <Typography variant=\"body1\">\n                          {String(question[FIELDS.QUESTIONS.QUESTION].value)}\n                        </Typography>\n                        {isRequired && (\n                          <Typography color=\"error\" component=\"span\">*</Typography>\n                        )}\n                      </Box>\n                    }\n                    secondary={\n                      hasAnswer && (\n                        <Box sx={{ mt: 1 }}>\n                          <Typography variant=\"body2\" color=\"text.secondary\">\n                            Answer: {String(answers[questionId][FIELDS.ANSWERS.ANSWER].value)}\n                          </Typography>\n                          <Typography variant=\"caption\" color=\"text.secondary\">\n                            Answered by: {String(answers[questionId][FIELDS.ANSWERS.USER_EMAIL].value)}\n                          </Typography>\n                        </Box>\n                      )\n                    }\n                  />\n                </ListItemButton>\n              </ListItem>\n              <Divider />\n            </React.Fragment>\n          );\n        })}\n      </List>\n    </Paper>\n  );\n};\n\nexport default QuestionList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}