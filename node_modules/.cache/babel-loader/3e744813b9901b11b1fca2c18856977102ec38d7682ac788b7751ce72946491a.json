{"ast":null,"code":"import React,{useEffect,useState}from'react';import{useNavigate,useSearchParams}from'react-router-dom';import{List,ListItem,ListItemText,ListItemButton,Typography,Paper,CircularProgress,Box,Alert,Divider}from'@mui/material';import{api,FIELDS}from'../config/quickbase.ts';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const QuestionList=()=>{const[searchParams]=useSearchParams();const userId=searchParams.get('userId');const requestId=searchParams.get('requestId');const formId=searchParams.get('formId');const[questions,setQuestions]=useState([]);const[answers,setAnswers]=useState({});const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const navigate=useNavigate();useEffect(()=>{const fetchData=async()=>{if(!userId||!requestId||!formId){setError('Missing required parameters: userId, requestId, or formId');setLoading(false);return;}try{// Fetch questions\nconst questionsResponse=await api.getQuestions(formId);setQuestions(questionsResponse.data);// Fetch answers for all questions\nconst answersMap={};for(const question of questionsResponse.data){const questionId=String(question[FIELDS.QUESTIONS.RECORD_ID].value);try{const answerResponse=await api.getAnswer(questionId,requestId);if(answerResponse.data&&answerResponse.data.length>0){answersMap[questionId]=answerResponse.data[0];}}catch(error){console.error(`Error fetching answer for question ${questionId}:`,error);// Continue with other questions even if one fails\n}}setAnswers(answersMap);}catch(error){setError('Failed to fetch data');console.error('Error fetching data:',error);}finally{setLoading(false);}};fetchData();},[userId,requestId,formId]);if(loading){return/*#__PURE__*/_jsx(Box,{display:\"flex\",justifyContent:\"center\",alignItems:\"center\",minHeight:\"200px\",children:/*#__PURE__*/_jsx(CircularProgress,{})});}if(error){return/*#__PURE__*/_jsx(Alert,{severity:\"error\",sx:{mb:2},children:error});}return/*#__PURE__*/_jsxs(Paper,{elevation:3,sx:{p:2},children:[/*#__PURE__*/_jsx(Typography,{variant:\"h5\",gutterBottom:true,children:\"Questions\"}),/*#__PURE__*/_jsx(List,{children:questions.map(question=>{var _answer$FIELDS$ANSWER;const questionId=String(question[FIELDS.QUESTIONS.RECORD_ID].value);const hasAnswer=answers[questionId]!==undefined;const isRequired=question[FIELDS.QUESTIONS.REQUIRED].value;const answer=answers[questionId];const userEmail=answer===null||answer===void 0?void 0:(_answer$FIELDS$ANSWER=answer[FIELDS.ANSWERS.USER_EMAIL])===null||_answer$FIELDS$ANSWER===void 0?void 0:_answer$FIELDS$ANSWER.value;return/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsx(ListItem,{disablePadding:true,children:/*#__PURE__*/_jsx(ListItemButton,{onClick:()=>navigate(`/question/${questionId}?userId=${userId}&requestId=${requestId}&formId=${formId}`),children:/*#__PURE__*/_jsx(ListItemText,{primary:/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',alignItems:'center',gap:1},children:[/*#__PURE__*/_jsx(Typography,{variant:\"body1\",children:String(question[FIELDS.QUESTIONS.QUESTION].value)}),isRequired&&/*#__PURE__*/_jsx(Typography,{color:\"error\",component:\"span\",children:\"*\"})]}),secondary:hasAnswer&&/*#__PURE__*/_jsxs(Box,{sx:{mt:1},children:[/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",color:\"text.secondary\",children:[\"Answer: \",String(answer[FIELDS.ANSWERS.ANSWER].value)]}),userEmail&&/*#__PURE__*/_jsxs(Typography,{variant:\"caption\",color:\"text.secondary\",children:[\"Answered by: \",String(userEmail)]})]})})})}),/*#__PURE__*/_jsx(Divider,{})]},questionId);})})]});};export default QuestionList;","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useSearchParams","List","ListItem","ListItemText","ListItemButton","Typography","Paper","CircularProgress","Box","Alert","Divider","api","FIELDS","jsx","_jsx","jsxs","_jsxs","QuestionList","searchParams","userId","get","requestId","formId","questions","setQuestions","answers","setAnswers","loading","setLoading","error","setError","navigate","fetchData","questionsResponse","getQuestions","data","answersMap","question","questionId","String","QUESTIONS","RECORD_ID","value","answerResponse","getAnswer","length","console","display","justifyContent","alignItems","minHeight","children","severity","sx","mb","elevation","p","variant","gutterBottom","map","_answer$FIELDS$ANSWER","hasAnswer","undefined","isRequired","REQUIRED","answer","userEmail","ANSWERS","USER_EMAIL","Fragment","disablePadding","onClick","primary","gap","QUESTION","color","component","secondary","mt","ANSWER"],"sources":["/home/ben/lighthouse/work_requsts/frontend/src/components/QuestionList.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport {\n  List,\n  ListItem,\n  ListItemText,\n  ListItemButton,\n  Typography,\n  Paper,\n  CircularProgress,\n  Box,\n  Alert,\n  Chip,\n  Divider\n} from '@mui/material';\nimport { api, FIELDS } from '../config/quickbase.ts';\n\ninterface QuickBaseField {\n  value: string | boolean;\n}\n\ninterface Question {\n  [key: number]: QuickBaseField;\n}\n\ninterface Answer {\n  [key: number]: QuickBaseField;\n}\n\nconst QuestionList = () => {\n  const [searchParams] = useSearchParams();\n  const userId = searchParams.get('userId');\n  const requestId = searchParams.get('requestId');\n  const formId = searchParams.get('formId');\n  const [questions, setQuestions] = useState<Question[]>([]);\n  const [answers, setAnswers] = useState<Record<string, Answer>>({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!userId || !requestId || !formId) {\n        setError('Missing required parameters: userId, requestId, or formId');\n        setLoading(false);\n        return;\n      }\n\n      try {\n        // Fetch questions\n        const questionsResponse = await api.getQuestions(formId);\n        setQuestions(questionsResponse.data);\n\n        // Fetch answers for all questions\n        const answersMap: Record<string, Answer> = {};\n        for (const question of questionsResponse.data) {\n          const questionId = String(question[FIELDS.QUESTIONS.RECORD_ID].value);\n          try {\n            const answerResponse = await api.getAnswer(questionId, requestId);\n            if (answerResponse.data && answerResponse.data.length > 0) {\n              answersMap[questionId] = answerResponse.data[0];\n            }\n          } catch (error) {\n            console.error(`Error fetching answer for question ${questionId}:`, error);\n            // Continue with other questions even if one fails\n          }\n        }\n        setAnswers(answersMap);\n      } catch (error) {\n        setError('Failed to fetch data');\n        console.error('Error fetching data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [userId, requestId, formId]);\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"200px\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Alert severity=\"error\" sx={{ mb: 2 }}>\n        {error}\n      </Alert>\n    );\n  }\n\n  return (\n    <Paper elevation={3} sx={{ p: 2 }}>\n      <Typography variant=\"h5\" gutterBottom>\n        Questions\n      </Typography>\n      <List>\n        {questions.map((question) => {\n          const questionId = String(question[FIELDS.QUESTIONS.RECORD_ID].value);\n          const hasAnswer = answers[questionId] !== undefined;\n          const isRequired = question[FIELDS.QUESTIONS.REQUIRED].value as boolean;\n          const answer = answers[questionId];\n          const userEmail = answer?.[FIELDS.ANSWERS.USER_EMAIL]?.value;\n\n          return (\n            <React.Fragment key={questionId}>\n              <ListItem disablePadding>\n                <ListItemButton\n                  onClick={() => navigate(`/question/${questionId}?userId=${userId}&requestId=${requestId}&formId=${formId}`)}\n                >\n                  <ListItemText\n                    primary={\n                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                        <Typography variant=\"body1\">\n                          {String(question[FIELDS.QUESTIONS.QUESTION].value)}\n                        </Typography>\n                        {isRequired && (\n                          <Typography color=\"error\" component=\"span\">*</Typography>\n                        )}\n                      </Box>\n                    }\n                    secondary={\n                      hasAnswer && (\n                        <Box sx={{ mt: 1 }}>\n                          <Typography variant=\"body2\" color=\"text.secondary\">\n                            Answer: {String(answer[FIELDS.ANSWERS.ANSWER].value)}\n                          </Typography>\n                          {userEmail && (\n                            <Typography variant=\"caption\" color=\"text.secondary\">\n                              Answered by: {String(userEmail)}\n                            </Typography>\n                          )}\n                        </Box>\n                      )\n                    }\n                  />\n                </ListItemButton>\n              </ListItem>\n              <Divider />\n            </React.Fragment>\n          );\n        })}\n      </List>\n    </Paper>\n  );\n};\n\nexport default QuestionList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}