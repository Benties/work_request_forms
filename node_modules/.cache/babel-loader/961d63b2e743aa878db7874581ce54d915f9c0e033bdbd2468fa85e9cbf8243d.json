{"ast":null,"code":"// QuickBase API configuration\nconst QB_API_URL='https://api.quickbase.com/v1';// Headers for QuickBase API requests\nconst getHeaders=()=>({'QB-Realm-Hostname':window.QUICKBASE_REALM,'User-Agent':'QuestionAnswerPlatform/1.0','Authorization':`QB-USER-TOKEN ${window.QUICKBASE_USER_TOKEN}`,'Content-Type':'application/json'});// Table IDs - Replace these with your actual QuickBase table IDs\nexport const TABLES={QUESTIONS:'buzzze3pn',ANSWERS:'buzzzhvkj',ATTACHMENTS:'buz3i82er'};// Field IDs mapping by table\nexport const FIELDS={QUESTIONS:{RECORD_ID:3,QUESTION:6,REQUIRED:7,FORM_ID:10},ANSWERS:{RECORD_ID:3,QUESTION_ID:10,ANSWER:6,USER_ID:7,USER_EMAIL:8,REQUEST_ID:12},ATTACHMENTS:{RECORD_ID:3,ANSWER_ID:6,FILE_NAME:7}};// API functions\nexport const api={// Get all active questions for a specific form\ngetQuestions:async formId=>{const response=await fetch(`${QB_API_URL}/records/query`,{method:'POST',headers:getHeaders(),body:JSON.stringify({from:TABLES.QUESTIONS,select:[FIELDS.QUESTIONS.RECORD_ID,FIELDS.QUESTIONS.QUESTION,FIELDS.QUESTIONS.REQUIRED],where:`{${FIELDS.QUESTIONS.FORM_ID}.EX.'${formId}'}`})});if(!response.ok){const error=await response.json();throw new Error(error.message||'Failed to fetch questions');}return response.json();},// Get a single question\ngetQuestion:async questionId=>{const response=await fetch(`${QB_API_URL}/records/query`,{method:'POST',headers:getHeaders(),body:JSON.stringify({from:TABLES.QUESTIONS,select:[FIELDS.QUESTIONS.RECORD_ID,FIELDS.QUESTIONS.QUESTION,FIELDS.QUESTIONS.REQUIRED],where:`{${FIELDS.QUESTIONS.RECORD_ID}.EX.'${questionId}'}`})});if(!response.ok){const error=await response.json();throw new Error(error.message||'Failed to fetch question');}return response.json();},// Get an answer for a specific question and request\ngetAnswer:async(questionId,requestId)=>{const response=await fetch(`${QB_API_URL}/records/query`,{method:'POST',headers:getHeaders(),body:JSON.stringify({from:TABLES.ANSWERS,select:[FIELDS.ANSWERS.RECORD_ID,FIELDS.ANSWERS.ANSWER,FIELDS.ANSWERS.USER_EMAIL,FIELDS.ANSWERS.USER_ID],where:`{${FIELDS.ANSWERS.QUESTION_ID}.EX.'${questionId}'}AND{${FIELDS.ANSWERS.REQUEST_ID}.EX.'${requestId}'}`})});if(!response.ok){const error=await response.json();throw new Error(error.message||'Failed to fetch answer');}return response.json();},// Save an answer\nsaveAnswer:async(questionId,answer,userId,requestId)=>{const response=await fetch(`${QB_API_URL}/records`,{method:'POST',headers:getHeaders(),body:JSON.stringify({to:TABLES.ANSWERS,data:[{[FIELDS.ANSWERS.QUESTION_ID]:{value:questionId},[FIELDS.ANSWERS.ANSWER]:{value:answer},[FIELDS.ANSWERS.USER_ID]:{value:userId},[FIELDS.ANSWERS.REQUEST_ID]:{value:requestId}}]})});if(!response.ok){const error=await response.json();throw new Error(error.message||'Failed to save answer');}return response.json();},// Upload an attachment\nuploadAttachment:async(answerId,file)=>{// First, create the attachment record\nconst createResponse=await fetch(`${QB_API_URL}/records`,{method:'POST',headers:getHeaders(),body:JSON.stringify({to:TABLES.ATTACHMENTS,data:[{[FIELDS.ATTACHMENTS.ANSWER_ID]:{value:answerId},[FIELDS.ATTACHMENTS.FILE_NAME]:{value:file.name}}]})});if(!createResponse.ok){const error=await createResponse.json();throw new Error(error.message||'Failed to create attachment record');}const{data:[{record_id}]}=await createResponse.json();// Then, upload the file content\nconst fileContent=await file.arrayBuffer();const uploadResponse=await fetch(`${QB_API_URL}/records`,{method:'POST',headers:getHeaders(),body:JSON.stringify({to:TABLES.ATTACHMENTS,data:[{[FIELDS.ATTACHMENTS.RECORD_ID]:{value:record_id},[FIELDS.ATTACHMENTS.FILE_CONTENT]:{value:fileContent}}]})});if(!uploadResponse.ok){const error=await uploadResponse.json();throw new Error(error.message||'Failed to upload file content');}return uploadResponse.json();},// Get user's progress\ngetProgress:async requestId=>{const response=await fetch(`${QB_API_URL}/records/query`,{method:'POST',headers:getHeaders(),body:JSON.stringify({from:TABLES.ANSWERS,select:[FIELDS.ANSWERS.ANSWER,FIELDS.ANSWERS.QUESTION_ID],where:`{${FIELDS.ANSWERS.REQUEST_ID}.EX.'${requestId}'}`})});if(!response.ok){const error=await response.json();throw new Error(error.message||'Failed to fetch progress');}return response.json();},// Update an existing answer\nupdateAnswer:async(answerId,answer,userId,requestId)=>{const response=await fetch(`${QB_API_URL}/records`,{method:'POST',headers:getHeaders(),body:JSON.stringify({to:TABLES.ANSWERS,data:[{[FIELDS.ANSWERS.RECORD_ID]:{value:answerId},[FIELDS.ANSWERS.ANSWER]:{value:answer},[FIELDS.ANSWERS.USER_ID]:{value:userId},[FIELDS.ANSWERS.REQUEST_ID]:{value:requestId}}]})});if(!response.ok){const error=await response.json();throw new Error(error.message||'Failed to update answer');}return response.json();}};","map":{"version":3,"names":["QB_API_URL","getHeaders","window","QUICKBASE_REALM","QUICKBASE_USER_TOKEN","TABLES","QUESTIONS","ANSWERS","ATTACHMENTS","FIELDS","RECORD_ID","QUESTION","REQUIRED","FORM_ID","QUESTION_ID","ANSWER","USER_ID","USER_EMAIL","REQUEST_ID","ANSWER_ID","FILE_NAME","api","getQuestions","formId","response","fetch","method","headers","body","JSON","stringify","from","select","where","ok","error","json","Error","message","getQuestion","questionId","getAnswer","requestId","saveAnswer","answer","userId","to","data","value","uploadAttachment","answerId","file","createResponse","name","record_id","fileContent","arrayBuffer","uploadResponse","FILE_CONTENT","getProgress","updateAnswer"],"sources":["/home/ben/lighthouse/work_requsts/frontend/src/config/quickbase.ts"],"sourcesContent":["// QuickBase API configuration\nconst QB_API_URL = 'https://api.quickbase.com/v1';\n\n// Headers for QuickBase API requests\nconst getHeaders = () => ({\n  'QB-Realm-Hostname': window.QUICKBASE_REALM,\n  'User-Agent': 'QuestionAnswerPlatform/1.0',\n  'Authorization': `QB-USER-TOKEN ${window.QUICKBASE_USER_TOKEN}`,\n  'Content-Type': 'application/json'\n});\n\n// Table IDs - Replace these with your actual QuickBase table IDs\nexport const TABLES = {\n  QUESTIONS: 'buzzze3pn',\n  ANSWERS: 'buzzzhvkj',\n  ATTACHMENTS: 'buz3i82er'\n};\n\n// Field IDs mapping by table\nexport const FIELDS = {\n  QUESTIONS: {\n    RECORD_ID: 3,\n    QUESTION: 6,\n    REQUIRED: 7,\n    FORM_ID: 10\n  },\n  ANSWERS: {\n    RECORD_ID: 3,\n    QUESTION_ID: 10,\n    ANSWER: 6,\n    USER_ID: 7,\n    USER_EMAIL: 8,\n    REQUEST_ID: 12,\n  },\n  ATTACHMENTS: {\n    RECORD_ID: 3,\n    ANSWER_ID: 6,\n    FILE_NAME: 7,\n  }\n};\n\n// API functions\nexport const api = {\n  // Get all active questions for a specific form\n  getQuestions: async (formId: string) => {\n    const response = await fetch(`${QB_API_URL}/records/query`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        from: TABLES.QUESTIONS,\n        select: [FIELDS.QUESTIONS.RECORD_ID, FIELDS.QUESTIONS.QUESTION, FIELDS.QUESTIONS.REQUIRED],\n        where: `{${FIELDS.QUESTIONS.FORM_ID}.EX.'${formId}'}`\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch questions');\n    }\n\n    return response.json();\n  },\n\n  // Get a single question\n  getQuestion: async (questionId: string) => {\n    const response = await fetch(`${QB_API_URL}/records/query`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        from: TABLES.QUESTIONS,\n        select: [FIELDS.QUESTIONS.RECORD_ID, FIELDS.QUESTIONS.QUESTION, FIELDS.QUESTIONS.REQUIRED],\n        where: `{${FIELDS.QUESTIONS.RECORD_ID}.EX.'${questionId}'}`\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch question');\n    }\n\n    return response.json();\n  },\n\n  // Get an answer for a specific question and request\n  getAnswer: async (questionId: string, requestId: string) => {\n    const response = await fetch(`${QB_API_URL}/records/query`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        from: TABLES.ANSWERS,\n        select: [FIELDS.ANSWERS.RECORD_ID, FIELDS.ANSWERS.ANSWER, FIELDS.ANSWERS.USER_EMAIL, FIELDS.ANSWERS.USER_ID],\n        where: `{${FIELDS.ANSWERS.QUESTION_ID}.EX.'${questionId}'}AND{${FIELDS.ANSWERS.REQUEST_ID}.EX.'${requestId}'}`\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch answer');\n    }\n\n    return response.json();\n  },\n\n  // Save an answer\n  saveAnswer: async (questionId: string, answer: string, userId: string, requestId: string) => {\n    const response = await fetch(`${QB_API_URL}/records`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        to: TABLES.ANSWERS,\n        data: [{\n          [FIELDS.ANSWERS.QUESTION_ID]: { value: questionId },\n          [FIELDS.ANSWERS.ANSWER]: { value: answer },\n          [FIELDS.ANSWERS.USER_ID]: { value: userId },\n          [FIELDS.ANSWERS.REQUEST_ID]: { value: requestId }\n        }]\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to save answer');\n    }\n\n    return response.json();\n  },\n\n  // Upload an attachment\n  uploadAttachment: async (answerId: string, file: File) => {\n    // First, create the attachment record\n    const createResponse = await fetch(`${QB_API_URL}/records`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        to: TABLES.ATTACHMENTS,\n        data: [{\n          [FIELDS.ATTACHMENTS.ANSWER_ID]: { value: answerId },\n          [FIELDS.ATTACHMENTS.FILE_NAME]: { value: file.name }\n        }]\n      })\n    });\n\n    if (!createResponse.ok) {\n      const error = await createResponse.json();\n      throw new Error(error.message || 'Failed to create attachment record');\n    }\n\n    const { data: [{ record_id }] } = await createResponse.json();\n\n    // Then, upload the file content\n    const fileContent = await file.arrayBuffer();\n    const uploadResponse = await fetch(`${QB_API_URL}/records`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        to: TABLES.ATTACHMENTS,\n        data: [{\n          [FIELDS.ATTACHMENTS.RECORD_ID]: { value: record_id },\n          [FIELDS.ATTACHMENTS.FILE_CONTENT]: { value: fileContent }\n        }]\n      })\n    });\n\n    if (!uploadResponse.ok) {\n      const error = await uploadResponse.json();\n      throw new Error(error.message || 'Failed to upload file content');\n    }\n\n    return uploadResponse.json();\n  },\n\n  // Get user's progress\n  getProgress: async (requestId: string) => {\n    const response = await fetch(`${QB_API_URL}/records/query`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        from: TABLES.ANSWERS,\n        select: [FIELDS.ANSWERS.ANSWER, FIELDS.ANSWERS.QUESTION_ID],\n        where: `{${FIELDS.ANSWERS.REQUEST_ID}.EX.'${requestId}'}`\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch progress');\n    }\n\n    return response.json();\n  },\n\n  // Update an existing answer\n  updateAnswer: async (answerId: string, answer: string, userId: string, requestId: string) => {\n    const response = await fetch(`${QB_API_URL}/records`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        to: TABLES.ANSWERS,\n        data: [{\n          [FIELDS.ANSWERS.RECORD_ID]: { value: answerId },\n          [FIELDS.ANSWERS.ANSWER]: { value: answer },\n          [FIELDS.ANSWERS.USER_ID]: { value: userId },\n          [FIELDS.ANSWERS.REQUEST_ID]: { value: requestId }\n        }]\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to update answer');\n    }\n\n    return response.json();\n  }\n};\n"],"mappings":"AAAA;AACA,KAAM,CAAAA,UAAU,CAAG,8BAA8B,CAEjD;AACA,KAAM,CAAAC,UAAU,CAAGA,CAAA,IAAO,CACxB,mBAAmB,CAAEC,MAAM,CAACC,eAAe,CAC3C,YAAY,CAAE,4BAA4B,CAC1C,eAAe,CAAE,iBAAiBD,MAAM,CAACE,oBAAoB,EAAE,CAC/D,cAAc,CAAE,kBAClB,CAAC,CAAC,CAEF;AACA,MAAO,MAAM,CAAAC,MAAM,CAAG,CACpBC,SAAS,CAAE,WAAW,CACtBC,OAAO,CAAE,WAAW,CACpBC,WAAW,CAAE,WACf,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,MAAM,CAAG,CACpBH,SAAS,CAAE,CACTI,SAAS,CAAE,CAAC,CACZC,QAAQ,CAAE,CAAC,CACXC,QAAQ,CAAE,CAAC,CACXC,OAAO,CAAE,EACX,CAAC,CACDN,OAAO,CAAE,CACPG,SAAS,CAAE,CAAC,CACZI,WAAW,CAAE,EAAE,CACfC,MAAM,CAAE,CAAC,CACTC,OAAO,CAAE,CAAC,CACVC,UAAU,CAAE,CAAC,CACbC,UAAU,CAAE,EACd,CAAC,CACDV,WAAW,CAAE,CACXE,SAAS,CAAE,CAAC,CACZS,SAAS,CAAE,CAAC,CACZC,SAAS,CAAE,CACb,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,GAAG,CAAG,CACjB;AACAC,YAAY,CAAE,KAAO,CAAAC,MAAc,EAAK,CACtC,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,GAAGzB,UAAU,gBAAgB,CAAE,CAC1D0B,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE1B,UAAU,CAAC,CAAC,CACrB2B,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACnBC,IAAI,CAAE1B,MAAM,CAACC,SAAS,CACtB0B,MAAM,CAAE,CAACvB,MAAM,CAACH,SAAS,CAACI,SAAS,CAAED,MAAM,CAACH,SAAS,CAACK,QAAQ,CAAEF,MAAM,CAACH,SAAS,CAACM,QAAQ,CAAC,CAC1FqB,KAAK,CAAE,IAAIxB,MAAM,CAACH,SAAS,CAACO,OAAO,QAAQU,MAAM,IACnD,CAAC,CACH,CAAC,CAAC,CAEF,GAAI,CAACC,QAAQ,CAACU,EAAE,CAAE,CAChB,KAAM,CAAAC,KAAK,CAAG,KAAM,CAAAX,QAAQ,CAACY,IAAI,CAAC,CAAC,CACnC,KAAM,IAAI,CAAAC,KAAK,CAACF,KAAK,CAACG,OAAO,EAAI,2BAA2B,CAAC,CAC/D,CAEA,MAAO,CAAAd,QAAQ,CAACY,IAAI,CAAC,CAAC,CACxB,CAAC,CAED;AACAG,WAAW,CAAE,KAAO,CAAAC,UAAkB,EAAK,CACzC,KAAM,CAAAhB,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,GAAGzB,UAAU,gBAAgB,CAAE,CAC1D0B,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE1B,UAAU,CAAC,CAAC,CACrB2B,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACnBC,IAAI,CAAE1B,MAAM,CAACC,SAAS,CACtB0B,MAAM,CAAE,CAACvB,MAAM,CAACH,SAAS,CAACI,SAAS,CAAED,MAAM,CAACH,SAAS,CAACK,QAAQ,CAAEF,MAAM,CAACH,SAAS,CAACM,QAAQ,CAAC,CAC1FqB,KAAK,CAAE,IAAIxB,MAAM,CAACH,SAAS,CAACI,SAAS,QAAQ8B,UAAU,IACzD,CAAC,CACH,CAAC,CAAC,CAEF,GAAI,CAAChB,QAAQ,CAACU,EAAE,CAAE,CAChB,KAAM,CAAAC,KAAK,CAAG,KAAM,CAAAX,QAAQ,CAACY,IAAI,CAAC,CAAC,CACnC,KAAM,IAAI,CAAAC,KAAK,CAACF,KAAK,CAACG,OAAO,EAAI,0BAA0B,CAAC,CAC9D,CAEA,MAAO,CAAAd,QAAQ,CAACY,IAAI,CAAC,CAAC,CACxB,CAAC,CAED;AACAK,SAAS,CAAE,KAAAA,CAAOD,UAAkB,CAAEE,SAAiB,GAAK,CAC1D,KAAM,CAAAlB,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,GAAGzB,UAAU,gBAAgB,CAAE,CAC1D0B,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE1B,UAAU,CAAC,CAAC,CACrB2B,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACnBC,IAAI,CAAE1B,MAAM,CAACE,OAAO,CACpByB,MAAM,CAAE,CAACvB,MAAM,CAACF,OAAO,CAACG,SAAS,CAAED,MAAM,CAACF,OAAO,CAACQ,MAAM,CAAEN,MAAM,CAACF,OAAO,CAACU,UAAU,CAAER,MAAM,CAACF,OAAO,CAACS,OAAO,CAAC,CAC5GiB,KAAK,CAAE,IAAIxB,MAAM,CAACF,OAAO,CAACO,WAAW,QAAQ0B,UAAU,SAAS/B,MAAM,CAACF,OAAO,CAACW,UAAU,QAAQwB,SAAS,IAC5G,CAAC,CACH,CAAC,CAAC,CAEF,GAAI,CAAClB,QAAQ,CAACU,EAAE,CAAE,CAChB,KAAM,CAAAC,KAAK,CAAG,KAAM,CAAAX,QAAQ,CAACY,IAAI,CAAC,CAAC,CACnC,KAAM,IAAI,CAAAC,KAAK,CAACF,KAAK,CAACG,OAAO,EAAI,wBAAwB,CAAC,CAC5D,CAEA,MAAO,CAAAd,QAAQ,CAACY,IAAI,CAAC,CAAC,CACxB,CAAC,CAED;AACAO,UAAU,CAAE,KAAAA,CAAOH,UAAkB,CAAEI,MAAc,CAAEC,MAAc,CAAEH,SAAiB,GAAK,CAC3F,KAAM,CAAAlB,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,GAAGzB,UAAU,UAAU,CAAE,CACpD0B,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE1B,UAAU,CAAC,CAAC,CACrB2B,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACnBgB,EAAE,CAAEzC,MAAM,CAACE,OAAO,CAClBwC,IAAI,CAAE,CAAC,CACL,CAACtC,MAAM,CAACF,OAAO,CAACO,WAAW,EAAG,CAAEkC,KAAK,CAAER,UAAW,CAAC,CACnD,CAAC/B,MAAM,CAACF,OAAO,CAACQ,MAAM,EAAG,CAAEiC,KAAK,CAAEJ,MAAO,CAAC,CAC1C,CAACnC,MAAM,CAACF,OAAO,CAACS,OAAO,EAAG,CAAEgC,KAAK,CAAEH,MAAO,CAAC,CAC3C,CAACpC,MAAM,CAACF,OAAO,CAACW,UAAU,EAAG,CAAE8B,KAAK,CAAEN,SAAU,CAClD,CAAC,CACH,CAAC,CACH,CAAC,CAAC,CAEF,GAAI,CAAClB,QAAQ,CAACU,EAAE,CAAE,CAChB,KAAM,CAAAC,KAAK,CAAG,KAAM,CAAAX,QAAQ,CAACY,IAAI,CAAC,CAAC,CACnC,KAAM,IAAI,CAAAC,KAAK,CAACF,KAAK,CAACG,OAAO,EAAI,uBAAuB,CAAC,CAC3D,CAEA,MAAO,CAAAd,QAAQ,CAACY,IAAI,CAAC,CAAC,CACxB,CAAC,CAED;AACAa,gBAAgB,CAAE,KAAAA,CAAOC,QAAgB,CAAEC,IAAU,GAAK,CACxD;AACA,KAAM,CAAAC,cAAc,CAAG,KAAM,CAAA3B,KAAK,CAAC,GAAGzB,UAAU,UAAU,CAAE,CAC1D0B,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE1B,UAAU,CAAC,CAAC,CACrB2B,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACnBgB,EAAE,CAAEzC,MAAM,CAACG,WAAW,CACtBuC,IAAI,CAAE,CAAC,CACL,CAACtC,MAAM,CAACD,WAAW,CAACW,SAAS,EAAG,CAAE6B,KAAK,CAAEE,QAAS,CAAC,CACnD,CAACzC,MAAM,CAACD,WAAW,CAACY,SAAS,EAAG,CAAE4B,KAAK,CAAEG,IAAI,CAACE,IAAK,CACrD,CAAC,CACH,CAAC,CACH,CAAC,CAAC,CAEF,GAAI,CAACD,cAAc,CAAClB,EAAE,CAAE,CACtB,KAAM,CAAAC,KAAK,CAAG,KAAM,CAAAiB,cAAc,CAAChB,IAAI,CAAC,CAAC,CACzC,KAAM,IAAI,CAAAC,KAAK,CAACF,KAAK,CAACG,OAAO,EAAI,oCAAoC,CAAC,CACxE,CAEA,KAAM,CAAES,IAAI,CAAE,CAAC,CAAEO,SAAU,CAAC,CAAE,CAAC,CAAG,KAAM,CAAAF,cAAc,CAAChB,IAAI,CAAC,CAAC,CAE7D;AACA,KAAM,CAAAmB,WAAW,CAAG,KAAM,CAAAJ,IAAI,CAACK,WAAW,CAAC,CAAC,CAC5C,KAAM,CAAAC,cAAc,CAAG,KAAM,CAAAhC,KAAK,CAAC,GAAGzB,UAAU,UAAU,CAAE,CAC1D0B,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE1B,UAAU,CAAC,CAAC,CACrB2B,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACnBgB,EAAE,CAAEzC,MAAM,CAACG,WAAW,CACtBuC,IAAI,CAAE,CAAC,CACL,CAACtC,MAAM,CAACD,WAAW,CAACE,SAAS,EAAG,CAAEsC,KAAK,CAAEM,SAAU,CAAC,CACpD,CAAC7C,MAAM,CAACD,WAAW,CAACkD,YAAY,EAAG,CAAEV,KAAK,CAAEO,WAAY,CAC1D,CAAC,CACH,CAAC,CACH,CAAC,CAAC,CAEF,GAAI,CAACE,cAAc,CAACvB,EAAE,CAAE,CACtB,KAAM,CAAAC,KAAK,CAAG,KAAM,CAAAsB,cAAc,CAACrB,IAAI,CAAC,CAAC,CACzC,KAAM,IAAI,CAAAC,KAAK,CAACF,KAAK,CAACG,OAAO,EAAI,+BAA+B,CAAC,CACnE,CAEA,MAAO,CAAAmB,cAAc,CAACrB,IAAI,CAAC,CAAC,CAC9B,CAAC,CAED;AACAuB,WAAW,CAAE,KAAO,CAAAjB,SAAiB,EAAK,CACxC,KAAM,CAAAlB,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,GAAGzB,UAAU,gBAAgB,CAAE,CAC1D0B,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE1B,UAAU,CAAC,CAAC,CACrB2B,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACnBC,IAAI,CAAE1B,MAAM,CAACE,OAAO,CACpByB,MAAM,CAAE,CAACvB,MAAM,CAACF,OAAO,CAACQ,MAAM,CAAEN,MAAM,CAACF,OAAO,CAACO,WAAW,CAAC,CAC3DmB,KAAK,CAAE,IAAIxB,MAAM,CAACF,OAAO,CAACW,UAAU,QAAQwB,SAAS,IACvD,CAAC,CACH,CAAC,CAAC,CAEF,GAAI,CAAClB,QAAQ,CAACU,EAAE,CAAE,CAChB,KAAM,CAAAC,KAAK,CAAG,KAAM,CAAAX,QAAQ,CAACY,IAAI,CAAC,CAAC,CACnC,KAAM,IAAI,CAAAC,KAAK,CAACF,KAAK,CAACG,OAAO,EAAI,0BAA0B,CAAC,CAC9D,CAEA,MAAO,CAAAd,QAAQ,CAACY,IAAI,CAAC,CAAC,CACxB,CAAC,CAED;AACAwB,YAAY,CAAE,KAAAA,CAAOV,QAAgB,CAAEN,MAAc,CAAEC,MAAc,CAAEH,SAAiB,GAAK,CAC3F,KAAM,CAAAlB,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,GAAGzB,UAAU,UAAU,CAAE,CACpD0B,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE1B,UAAU,CAAC,CAAC,CACrB2B,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACnBgB,EAAE,CAAEzC,MAAM,CAACE,OAAO,CAClBwC,IAAI,CAAE,CAAC,CACL,CAACtC,MAAM,CAACF,OAAO,CAACG,SAAS,EAAG,CAAEsC,KAAK,CAAEE,QAAS,CAAC,CAC/C,CAACzC,MAAM,CAACF,OAAO,CAACQ,MAAM,EAAG,CAAEiC,KAAK,CAAEJ,MAAO,CAAC,CAC1C,CAACnC,MAAM,CAACF,OAAO,CAACS,OAAO,EAAG,CAAEgC,KAAK,CAAEH,MAAO,CAAC,CAC3C,CAACpC,MAAM,CAACF,OAAO,CAACW,UAAU,EAAG,CAAE8B,KAAK,CAAEN,SAAU,CAClD,CAAC,CACH,CAAC,CACH,CAAC,CAAC,CAEF,GAAI,CAAClB,QAAQ,CAACU,EAAE,CAAE,CAChB,KAAM,CAAAC,KAAK,CAAG,KAAM,CAAAX,QAAQ,CAACY,IAAI,CAAC,CAAC,CACnC,KAAM,IAAI,CAAAC,KAAK,CAACF,KAAK,CAACG,OAAO,EAAI,yBAAyB,CAAC,CAC7D,CAEA,MAAO,CAAAd,QAAQ,CAACY,IAAI,CAAC,CAAC,CACxB,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}