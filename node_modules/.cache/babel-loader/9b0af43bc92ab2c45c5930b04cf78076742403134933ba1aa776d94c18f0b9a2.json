{"ast":null,"code":"var _jsxFileName = \"/home/ben/lighthouse/work_requsts/frontend/src/components/QuestionList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { List, ListItem, Typography, Paper, CircularProgress, Box, Alert, ListItemSecondaryAction, ImageList, ImageListItem, Button } from '@mui/material';\nimport { Edit as EditIcon, Image as ImageIcon, PictureAsPdf as PdfIcon, Description as DocumentIcon } from '@mui/icons-material';\nimport { api, FIELDS } from '../config/quickbase.ts';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst QuestionList = () => {\n  _s();\n  const [searchParams] = useSearchParams();\n  const userId = searchParams.get('userId');\n  const requestId = searchParams.get('requestId');\n  const formId = searchParams.get('formId');\n  const [questions, setQuestions] = useState([]);\n  const [answers, setAnswers] = useState({});\n  const [attachments, setAttachments] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!requestId || !formId) {\n        setError('Missing required parameters: requestId or formId');\n        setLoading(false);\n        return;\n      }\n      try {\n        // Fetch questions\n        const questionsResponse = await api.getQuestions(formId);\n        setQuestions(questionsResponse.data);\n\n        // Fetch answers for all questions\n        const answersPromises = questionsResponse.data.map(async question => {\n          const answerResponse = await api.getAnswer(String(question[FIELDS.QUESTIONS.RECORD_ID].value), requestId);\n          if (answerResponse.data && answerResponse.data.length > 0) {\n            const answer = answerResponse.data[0];\n            const answerId = String(answer[FIELDS.ANSWERS.RECORD_ID].value);\n\n            // Fetch attachments for this answer\n            const attachmentsResponse = await api.getAttachmentsForAnswer(Number(answer[FIELDS.ANSWERS.RECORD_ID].value));\n            return {\n              questionId: String(question[FIELDS.QUESTIONS.RECORD_ID].value),\n              answer,\n              attachments: attachmentsResponse.data\n            };\n          }\n          return null;\n        });\n        const results = await Promise.all(answersPromises);\n        const newAnswers = {};\n        const newAttachments = {};\n        results.forEach(result => {\n          if (result) {\n            newAnswers[result.questionId] = result.answer;\n            newAttachments[result.questionId] = result.attachments;\n          }\n        });\n        setAnswers(newAnswers);\n        setAttachments(newAttachments);\n      } catch (error) {\n        setError('Failed to load data');\n        console.error('Error fetching data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [requestId, formId]);\n  const handleEdit = questionId => {\n    navigate(`/question/${questionId}?userId=${userId}&requestId=${requestId}&formId=${formId}`);\n  };\n  const getFileIcon = fileName => {\n    var _fileName$split$pop;\n    if (!fileName) return /*#__PURE__*/_jsxDEV(DocumentIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 27\n    }, this);\n    const extension = (_fileName$split$pop = fileName.split('.').pop()) === null || _fileName$split$pop === void 0 ? void 0 : _fileName$split$pop.toLowerCase();\n    switch (extension) {\n      case 'jpg':\n      case 'jpeg':\n      case 'png':\n      case 'gif':\n        return /*#__PURE__*/_jsxDEV(ImageIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 16\n        }, this);\n      case 'pdf':\n        return /*#__PURE__*/_jsxDEV(PdfIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 16\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(DocumentIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  const getAttachmentFileName = attachment => {\n    var _attachment$FIELDS$AT, _fileAttachment$versi;\n    const fileAttachment = (_attachment$FIELDS$AT = attachment[FIELDS.ATTACHMENTS.FILE_ATTACHMENT]) === null || _attachment$FIELDS$AT === void 0 ? void 0 : _attachment$FIELDS$AT.value;\n    if (typeof fileAttachment === 'object' && (fileAttachment === null || fileAttachment === void 0 ? void 0 : (_fileAttachment$versi = fileAttachment.versions) === null || _fileAttachment$versi === void 0 ? void 0 : _fileAttachment$versi.length) > 0) {\n      const latestVersion = fileAttachment.versions[fileAttachment.versions.length - 1];\n      return latestVersion.fileName;\n    }\n    return undefined;\n  };\n  const getAttachmentUrl = attachment => {\n    var _attachment$;\n    const urlField = (_attachment$ = attachment[8]) === null || _attachment$ === void 0 ? void 0 : _attachment$.value;\n    if (typeof urlField === 'string') {\n      return urlField;\n    }\n    return undefined;\n  };\n  const handleAttachmentClick = attachment => {\n    const url = getAttachmentUrl(attachment);\n    if (url) {\n      window.open(url, '_blank');\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      minHeight: \"200px\",\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 2\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    elevation: 3,\n    sx: {\n      p: 3\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      gutterBottom: true,\n      children: \"Questions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      children: questions.map(question => {\n        const questionId = String(question[FIELDS.QUESTIONS.RECORD_ID].value);\n        const answer = answers[questionId];\n        const questionAttachments = attachments[questionId] || [];\n        return /*#__PURE__*/_jsxDEV(ListItem, {\n          divider: true,\n          sx: {\n            flexDirection: 'column',\n            alignItems: 'flex-start',\n            py: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              width: '100%',\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'flex-start'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                flex: 1,\n                mr: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle1\",\n                component: \"div\",\n                sx: {\n                  mb: 1\n                },\n                children: String(question[FIELDS.QUESTIONS.QUESTION].value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 219,\n                columnNumber: 19\n              }, this), answer ? /*#__PURE__*/_jsxDEV(Box, {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  component: \"div\",\n                  variant: \"body2\",\n                  color: \"text.primary\",\n                  sx: {\n                    whiteSpace: 'pre-wrap',\n                    mb: 1\n                  },\n                  children: String(answer[FIELDS.ANSWERS.ANSWER].value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 224,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"caption\",\n                  color: \"text.secondary\",\n                  children: [\"Answered by: \", String(answer[FIELDS.ANSWERS.USER_EMAIL].value)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 232,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 21\n              }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                color: \"text.secondary\",\n                children: \"Not answered\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(ListItemSecondaryAction, {\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outlined\",\n                size: \"small\",\n                startIcon: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 246,\n                  columnNumber: 32\n                }, this),\n                onClick: () => handleEdit(questionId),\n                children: answer ? 'Edit' : 'Answer'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 243,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 15\n          }, this), questionAttachments.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              width: '100%',\n              mt: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle2\",\n              color: \"text.secondary\",\n              sx: {\n                mb: 1\n              },\n              children: \"Attachments:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(ImageList, {\n              cols: 4,\n              rowHeight: 120,\n              children: questionAttachments.map(attachment => {\n                const fileName = getAttachmentFileName(attachment);\n                return /*#__PURE__*/_jsxDEV(ImageListItem, {\n                  children: /*#__PURE__*/_jsxDEV(Box, {\n                    sx: {\n                      width: '100%',\n                      height: '100%',\n                      display: 'flex',\n                      flexDirection: 'column',\n                      alignItems: 'center',\n                      justifyContent: 'center',\n                      bgcolor: 'grey.100',\n                      cursor: 'pointer',\n                      position: 'relative',\n                      overflow: 'hidden',\n                      '&:hover': {\n                        '& .overlay': {\n                          opacity: 1\n                        }\n                      }\n                    },\n                    onClick: () => handleAttachmentClick(attachment),\n                    children: fileName !== null && fileName !== void 0 && fileName.match(/\\.(jpg|jpeg|png|gif)$/i) ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                        src: getAttachmentUrl(attachment),\n                        alt: fileName,\n                        style: {\n                          width: '100%',\n                          height: '100%',\n                          objectFit: 'contain',\n                          padding: '4px'\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 286,\n                        columnNumber: 33\n                      }, this), /*#__PURE__*/_jsxDEV(Box, {\n                        className: \"overlay\",\n                        sx: {\n                          position: 'absolute',\n                          top: 0,\n                          left: 0,\n                          right: 0,\n                          bottom: 0,\n                          bgcolor: 'rgba(0, 0, 0, 0.5)',\n                          display: 'flex',\n                          alignItems: 'center',\n                          justifyContent: 'center',\n                          opacity: 0,\n                          transition: 'opacity 0.2s'\n                        },\n                        children: /*#__PURE__*/_jsxDEV(Typography, {\n                          variant: \"caption\",\n                          sx: {\n                            color: 'white',\n                            textAlign: 'center',\n                            px: 1\n                          },\n                          children: \"Click to view\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 312,\n                          columnNumber: 35\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 296,\n                        columnNumber: 33\n                      }, this)]\n                    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                      children: [getFileIcon(fileName), /*#__PURE__*/_jsxDEV(Typography, {\n                        variant: \"caption\",\n                        sx: {\n                          mt: 0.5,\n                          textAlign: 'center',\n                          px: 1\n                        },\n                        children: fileName || 'Unknown File'\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 327,\n                        columnNumber: 33\n                      }, this)]\n                    }, void 0, true)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 264,\n                    columnNumber: 27\n                  }, this)\n                }, Number(attachment[FIELDS.ATTACHMENTS.RECORD_ID].value), false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 263,\n                  columnNumber: 25\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 17\n          }, this)]\n        }, questionId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 5\n  }, this);\n};\n_s(QuestionList, \"wd4H/2TUpLQeN/0eqcUatNXZrZg=\", false, function () {\n  return [useSearchParams, useNavigate];\n});\n_c = QuestionList;\nexport default QuestionList;\nvar _c;\n$RefreshReg$(_c, \"QuestionList\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useSearchParams","List","ListItem","Typography","Paper","CircularProgress","Box","Alert","ListItemSecondaryAction","ImageList","ImageListItem","Button","Edit","EditIcon","Image","ImageIcon","PictureAsPdf","PdfIcon","Description","DocumentIcon","api","FIELDS","jsxDEV","_jsxDEV","Fragment","_Fragment","QuestionList","_s","searchParams","userId","get","requestId","formId","questions","setQuestions","answers","setAnswers","attachments","setAttachments","loading","setLoading","error","setError","navigate","fetchData","questionsResponse","getQuestions","data","answersPromises","map","question","answerResponse","getAnswer","String","QUESTIONS","RECORD_ID","value","length","answer","answerId","ANSWERS","attachmentsResponse","getAttachmentsForAnswer","Number","questionId","results","Promise","all","newAnswers","newAttachments","forEach","result","console","handleEdit","getFileIcon","fileName","_fileName$split$pop","_jsxFileName","lineNumber","columnNumber","extension","split","pop","toLowerCase","getAttachmentFileName","attachment","_attachment$FIELDS$AT","_fileAttachment$versi","fileAttachment","ATTACHMENTS","FILE_ATTACHMENT","versions","latestVersion","undefined","getAttachmentUrl","_attachment$","urlField","handleAttachmentClick","url","window","open","display","justifyContent","alignItems","minHeight","children","severity","sx","mb","elevation","p","variant","gutterBottom","questionAttachments","divider","flexDirection","py","width","flex","mr","component","QUESTION","color","whiteSpace","ANSWER","USER_EMAIL","size","startIcon","onClick","mt","cols","rowHeight","height","bgcolor","cursor","position","overflow","opacity","match","src","alt","style","objectFit","padding","className","top","left","right","bottom","transition","textAlign","px","_c","$RefreshReg$"],"sources":["/home/ben/lighthouse/work_requsts/frontend/src/components/QuestionList.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport {\n  List,\n  ListItem,\n  ListItemText,\n  ListItemButton,\n  Typography,\n  Paper,\n  CircularProgress,\n  Box,\n  Alert,\n  Chip,\n  Divider,\n  ListItemSecondaryAction,\n  IconButton,\n  ImageList,\n  ImageListItem,\n  ImageListItemBar,\n  Button\n} from '@mui/material';\nimport {\n  Edit as EditIcon,\n  Image as ImageIcon,\n  PictureAsPdf as PdfIcon,\n  Description as DocumentIcon\n} from '@mui/icons-material';\nimport { api, FIELDS } from '../config/quickbase.ts';\n\ninterface QuickBaseField {\n  value: string | boolean;\n}\n\ninterface Question {\n  [key: number]: QuickBaseField;\n}\n\ninterface Answer {\n  [key: number]: QuickBaseField;\n}\n\ninterface Attachment {\n  record_id: number;\n  [key: number]: {\n    value: number | {\n      url: string;\n      versions: Array<{\n        creator: {\n          email: string;\n          id: string;\n          name: string;\n          userName: string;\n        };\n        fileName: string;\n        uploaded: string;\n        versionNumber: number;\n      }>;\n    };\n  };\n}\n\nconst QuestionList = () => {\n  const [searchParams] = useSearchParams();\n  const userId = searchParams.get('userId');\n  const requestId = searchParams.get('requestId');\n  const formId = searchParams.get('formId');\n  const [questions, setQuestions] = useState<Question[]>([]);\n  const [answers, setAnswers] = useState<{ [key: string]: Answer }>({});\n  const [attachments, setAttachments] = useState<{ [key: string]: Attachment[] }>({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!requestId || !formId) {\n        setError('Missing required parameters: requestId or formId');\n        setLoading(false);\n        return;\n      }\n\n      try {\n        // Fetch questions\n        const questionsResponse = await api.getQuestions(formId);\n        setQuestions(questionsResponse.data);\n\n        // Fetch answers for all questions\n        const answersPromises = questionsResponse.data.map(async (question) => {\n          const answerResponse = await api.getAnswer(\n            String(question[FIELDS.QUESTIONS.RECORD_ID].value),\n            requestId\n          );\n          if (answerResponse.data && answerResponse.data.length > 0) {\n            const answer = answerResponse.data[0];\n            const answerId = String(answer[FIELDS.ANSWERS.RECORD_ID].value);\n\n            // Fetch attachments for this answer\n            const attachmentsResponse = await api.getAttachmentsForAnswer(\n              Number(answer[FIELDS.ANSWERS.RECORD_ID].value)\n            );\n\n            return {\n              questionId: String(question[FIELDS.QUESTIONS.RECORD_ID].value),\n              answer,\n              attachments: attachmentsResponse.data\n            };\n          }\n          return null;\n        });\n\n        const results = await Promise.all(answersPromises);\n        const newAnswers: { [key: string]: Answer } = {};\n        const newAttachments: { [key: string]: Attachment[] } = {};\n\n        results.forEach((result) => {\n          if (result) {\n            newAnswers[result.questionId] = result.answer;\n            newAttachments[result.questionId] = result.attachments;\n          }\n        });\n\n        setAnswers(newAnswers);\n        setAttachments(newAttachments);\n      } catch (error) {\n        setError('Failed to load data');\n        console.error('Error fetching data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [requestId, formId]);\n\n  const handleEdit = (questionId: string) => {\n    navigate(`/question/${questionId}?userId=${userId}&requestId=${requestId}&formId=${formId}`);\n  };\n\n  const getFileIcon = (fileName: string | undefined) => {\n    if (!fileName) return <DocumentIcon />;\n\n    const extension = fileName.split('.').pop()?.toLowerCase();\n    switch (extension) {\n      case 'jpg':\n      case 'jpeg':\n      case 'png':\n      case 'gif':\n        return <ImageIcon />;\n      case 'pdf':\n        return <PdfIcon />;\n      default:\n        return <DocumentIcon />;\n    }\n  };\n\n  const getAttachmentFileName = (attachment: Attachment) => {\n    const fileAttachment = attachment[FIELDS.ATTACHMENTS.FILE_ATTACHMENT]?.value;\n    if (typeof fileAttachment === 'object' && fileAttachment?.versions?.length > 0) {\n      const latestVersion = fileAttachment.versions[fileAttachment.versions.length - 1];\n      return latestVersion.fileName;\n    }\n    return undefined;\n  };\n\n  const getAttachmentUrl = (attachment: Attachment) => {\n    const urlField = attachment[8]?.value;\n    if (typeof urlField === 'string') {\n      return urlField;\n    }\n    return undefined;\n  };\n\n  const handleAttachmentClick = (attachment: Attachment) => {\n    const url = getAttachmentUrl(attachment);\n    if (url) {\n      window.open(url, '_blank');\n    }\n  };\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"200px\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Alert severity=\"error\" sx={{ mb: 2 }}>\n        {error}\n      </Alert>\n    );\n  }\n\n  return (\n    <Paper elevation={3} sx={{ p: 3 }}>\n      <Typography variant=\"h5\" gutterBottom>\n        Questions\n      </Typography>\n      <List>\n        {questions.map((question) => {\n          const questionId = String(question[FIELDS.QUESTIONS.RECORD_ID].value);\n          const answer = answers[questionId];\n          const questionAttachments = attachments[questionId] || [];\n\n          return (\n            <ListItem\n              key={questionId}\n              divider\n              sx={{\n                flexDirection: 'column',\n                alignItems: 'flex-start',\n                py: 2\n              }}\n            >\n              <Box sx={{ width: '100%', display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\n                <Box sx={{ flex: 1, mr: 2 }}>\n                  <Typography variant=\"subtitle1\" component=\"div\" sx={{ mb: 1 }}>\n                    {String(question[FIELDS.QUESTIONS.QUESTION].value)}\n                  </Typography>\n                  {answer ? (\n                    <Box>\n                      <Typography\n                        component=\"div\"\n                        variant=\"body2\"\n                        color=\"text.primary\"\n                        sx={{ whiteSpace: 'pre-wrap', mb: 1 }}\n                      >\n                        {String(answer[FIELDS.ANSWERS.ANSWER].value)}\n                      </Typography>\n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        Answered by: {String(answer[FIELDS.ANSWERS.USER_EMAIL].value)}\n                      </Typography>\n                    </Box>\n                  ) : (\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Not answered\n                    </Typography>\n                  )}\n                </Box>\n                <ListItemSecondaryAction>\n                  <Button\n                    variant=\"outlined\"\n                    size=\"small\"\n                    startIcon={<EditIcon />}\n                    onClick={() => handleEdit(questionId)}\n                  >\n                    {answer ? 'Edit' : 'Answer'}\n                  </Button>\n                </ListItemSecondaryAction>\n              </Box>\n\n              {questionAttachments.length > 0 && (\n                <Box sx={{ width: '100%', mt: 2 }}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\" sx={{ mb: 1 }}>\n                    Attachments:\n                  </Typography>\n                  <ImageList cols={4} rowHeight={120}>\n                    {questionAttachments.map((attachment) => {\n                      const fileName = getAttachmentFileName(attachment);\n                      return (\n                        <ImageListItem key={Number(attachment[FIELDS.ATTACHMENTS.RECORD_ID].value)}>\n                          <Box\n                            sx={{\n                              width: '100%',\n                              height: '100%',\n                              display: 'flex',\n                              flexDirection: 'column',\n                              alignItems: 'center',\n                              justifyContent: 'center',\n                              bgcolor: 'grey.100',\n                              cursor: 'pointer',\n                              position: 'relative',\n                              overflow: 'hidden',\n                              '&:hover': {\n                                '& .overlay': {\n                                  opacity: 1,\n                                },\n                              },\n                            }}\n                            onClick={() => handleAttachmentClick(attachment)}\n                          >\n                            {fileName?.match(/\\.(jpg|jpeg|png|gif)$/i) ? (\n                              <>\n                                <img\n                                  src={getAttachmentUrl(attachment)}\n                                  alt={fileName}\n                                  style={{\n                                    width: '100%',\n                                    height: '100%',\n                                    objectFit: 'contain',\n                                    padding: '4px'\n                                  }}\n                                />\n                                <Box\n                                  className=\"overlay\"\n                                  sx={{\n                                    position: 'absolute',\n                                    top: 0,\n                                    left: 0,\n                                    right: 0,\n                                    bottom: 0,\n                                    bgcolor: 'rgba(0, 0, 0, 0.5)',\n                                    display: 'flex',\n                                    alignItems: 'center',\n                                    justifyContent: 'center',\n                                    opacity: 0,\n                                    transition: 'opacity 0.2s',\n                                  }}\n                                >\n                                  <Typography\n                                    variant=\"caption\"\n                                    sx={{\n                                      color: 'white',\n                                      textAlign: 'center',\n                                      px: 1\n                                    }}\n                                  >\n                                    Click to view\n                                  </Typography>\n                                </Box>\n                              </>\n                            ) : (\n                              <>\n                                {getFileIcon(fileName)}\n                                <Typography variant=\"caption\" sx={{ mt: 0.5, textAlign: 'center', px: 1 }}>\n                                  {fileName || 'Unknown File'}\n                                </Typography>\n                              </>\n                            )}\n                          </Box>\n                        </ImageListItem>\n                      );\n                    })}\n                  </ImageList>\n                </Box>\n              )}\n            </ListItem>\n          );\n        })}\n      </List>\n    </Paper>\n  );\n};\n\nexport default QuestionList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}