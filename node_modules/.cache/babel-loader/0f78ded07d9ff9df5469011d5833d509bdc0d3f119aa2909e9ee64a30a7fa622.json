{"ast":null,"code":"// QuickBase API configuration\nconst QB_API_URL='https://api.quickbase.com/v1';// Headers for QuickBase API requests\nconst getHeaders=()=>({'QB-Realm-Hostname':window.QUICKBASE_REALM,'User-Agent':'QuestionAnswerPlatform/1.0','Authorization':`QB-USER-TOKEN ${window.QUICKBASE_USER_TOKEN}`,'Content-Type':'application/json'});// Table IDs - Replace these with your actual QuickBase table IDs\nexport const TABLES={QUESTIONS:'buzzze3pn',ANSWERS:'buzzzhvkj',ATTACHMENTS:'buz3i82er'};// Field IDs mapping by table\nexport const FIELDS={QUESTIONS:{RECORD_ID:3,QUESTION:6,REQUIRED:7,FORM_ID:10},ANSWERS:{RECORD_ID:3,QUESTION_ID:10,ANSWER:6,USER_ID:7,USER_EMAIL:8,REQUEST_ID:12},ATTACHMENTS:{RECORD_ID:3,ANSWER_ID:6,FILE_ATTACHMENT:7}};// Types for file attachment data\n// API functions\nexport const api={// Get all active questions for a specific form\ngetQuestions:async formId=>{const response=await fetch(`${QB_API_URL}/records/query`,{method:'POST',headers:getHeaders(),body:JSON.stringify({from:TABLES.QUESTIONS,select:[FIELDS.QUESTIONS.RECORD_ID,FIELDS.QUESTIONS.QUESTION,FIELDS.QUESTIONS.REQUIRED],where:`{${FIELDS.QUESTIONS.FORM_ID}.EX.'${formId}'}`})});if(!response.ok){const error=await response.json();throw new Error(error.message||'Failed to fetch questions');}return response.json();},// Get a single question\ngetQuestion:async questionId=>{const response=await fetch(`${QB_API_URL}/records/query`,{method:'POST',headers:getHeaders(),body:JSON.stringify({from:TABLES.QUESTIONS,select:[FIELDS.QUESTIONS.RECORD_ID,FIELDS.QUESTIONS.QUESTION,FIELDS.QUESTIONS.REQUIRED],where:`{${FIELDS.QUESTIONS.RECORD_ID}.EX.'${questionId}'}`})});if(!response.ok){const error=await response.json();throw new Error(error.message||'Failed to fetch question');}return response.json();},// Get an answer for a specific question and request\ngetAnswer:async(questionId,requestId)=>{const response=await fetch(`${QB_API_URL}/records/query`,{method:'POST',headers:getHeaders(),body:JSON.stringify({from:TABLES.ANSWERS,select:[FIELDS.ANSWERS.RECORD_ID,FIELDS.ANSWERS.ANSWER,FIELDS.ANSWERS.USER_EMAIL,FIELDS.ANSWERS.USER_ID],where:`{${FIELDS.ANSWERS.QUESTION_ID}.EX.'${questionId}'}AND{${FIELDS.ANSWERS.REQUEST_ID}.EX.'${requestId}'}`})});if(!response.ok){const error=await response.json();throw new Error(error.message||'Failed to fetch answer');}return response.json();},// Save an answer\nsaveAnswer:async(questionId,answer,userId,requestId)=>{const response=await fetch(`${QB_API_URL}/records`,{method:'POST',headers:getHeaders(),body:JSON.stringify({to:TABLES.ANSWERS,data:[{[FIELDS.ANSWERS.QUESTION_ID]:{value:questionId},[FIELDS.ANSWERS.ANSWER]:{value:answer},[FIELDS.ANSWERS.USER_ID]:{value:userId},[FIELDS.ANSWERS.REQUEST_ID]:{value:requestId}}]})});if(!response.ok){const error=await response.json();throw new Error(error.message||'Failed to save answer');}return response.json();},// Get user's progress\ngetProgress:async requestId=>{const response=await fetch(`${QB_API_URL}/records/query`,{method:'POST',headers:getHeaders(),body:JSON.stringify({from:TABLES.ANSWERS,select:[FIELDS.ANSWERS.ANSWER,FIELDS.ANSWERS.QUESTION_ID],where:`{${FIELDS.ANSWERS.REQUEST_ID}.EX.'${requestId}'}`})});if(!response.ok){const error=await response.json();throw new Error(error.message||'Failed to fetch progress');}return response.json();},// Update an existing answer\nupdateAnswer:async(answerId,answer,userId,requestId)=>{const response=await fetch(`${QB_API_URL}/records`,{method:'POST',headers:getHeaders(),body:JSON.stringify({to:TABLES.ANSWERS,data:[{[FIELDS.ANSWERS.RECORD_ID]:{value:answerId},[FIELDS.ANSWERS.ANSWER]:{value:answer},[FIELDS.ANSWERS.USER_ID]:{value:userId},[FIELDS.ANSWERS.REQUEST_ID]:{value:requestId}}]})});if(!response.ok){const error=await response.json();throw new Error(error.message||'Failed to update answer');}return response.json();},// Get file attachment\ngetFileAttachment:async recordId=>{try{const response=await fetch(`${QB_API_URL}/records/${TABLES.ATTACHMENTS}/${recordId}`,{method:'GET',headers:getHeaders()});if(!response.ok)throw new Error('Failed to fetch file attachment');return await response.json();}catch(error){console.error('Error fetching file attachment:',error);throw error;}},// Get attachments for an answer\ngetAttachmentsForAnswer:async answerId=>{try{const response=await fetch(`${QB_API_URL}/records/query`,{method:'POST',headers:getHeaders(),body:JSON.stringify({from:TABLES.ATTACHMENTS,select:[FIELDS.ATTACHMENTS.RECORD_ID,FIELDS.ATTACHMENTS.FILE_ATTACHMENT,8],where:`{${FIELDS.ATTACHMENTS.ANSWER_ID}.EX.'${answerId}'}`})});if(!response.ok)throw new Error('Failed to fetch attachments');return await response.json();}catch(error){console.error('Error fetching attachments:',error);throw error;}},// Upload or update file attachment\nuploadFileAttachment:async(answerId,fileName,fileContent,recordId)=>{try{// Convert file content to Base64 if it's a File object\nlet base64Content;if(fileContent instanceof File){const buffer=await fileContent.arrayBuffer();base64Content=btoa(String.fromCharCode(...new Uint8Array(buffer)));}else{base64Content=fileContent;// Assume it's already Base64 encoded if it's a string\n}const data={to:TABLES.ATTACHMENTS,data:[{...(recordId&&{[FIELDS.ATTACHMENTS.RECORD_ID]:{value:recordId}}),[FIELDS.ATTACHMENTS.FILE_ATTACHMENT]:{value:{fileName,data:base64Content}},[FIELDS.ATTACHMENTS.ANSWER_ID]:{value:answerId}}]};const response=await fetch(`${QB_API_URL}/records`,{method:'POST',headers:getHeaders(),body:JSON.stringify(data)});if(!response.ok)throw new Error('Failed to upload file attachment');}catch(error){console.error('Error uploading file attachment:',error);throw error;}},// Download file attachment\ndownloadFileAttachment:async url=>{try{var _contentDisposition$s;const response=await fetch(`${QB_API_URL}${url}`,{method:'GET',headers:getHeaders()});if(!response.ok)throw new Error('Failed to download file attachment');const contentDisposition=response.headers.get('Content-Disposition');const fileName=(contentDisposition===null||contentDisposition===void 0?void 0:(_contentDisposition$s=contentDisposition.split('filename=')[1])===null||_contentDisposition$s===void 0?void 0:_contentDisposition$s.replace(/\"/g,''))||'downloaded_file';const content=await response.text();// Base64 encoded content\nreturn{fileName,content};}catch(error){console.error('Error downloading file attachment:',error);throw error;}},// Delete an attachment\ndeleteAttachment:async recordId=>{const response=await fetch(`${QB_API_URL}/records`,{method:'DELETE',headers:getHeaders(),body:JSON.stringify({from:TABLES.ATTACHMENTS,where:`{${FIELDS.ATTACHMENTS.RECORD_ID}.EX.'${recordId}'}`})});if(!response.ok){const error=await response.json();throw new Error(error.message||'Failed to delete attachment');}return response.json();}};","map":{"version":3,"names":["QB_API_URL","getHeaders","window","QUICKBASE_REALM","QUICKBASE_USER_TOKEN","TABLES","QUESTIONS","ANSWERS","ATTACHMENTS","FIELDS","RECORD_ID","QUESTION","REQUIRED","FORM_ID","QUESTION_ID","ANSWER","USER_ID","USER_EMAIL","REQUEST_ID","ANSWER_ID","FILE_ATTACHMENT","api","getQuestions","formId","response","fetch","method","headers","body","JSON","stringify","from","select","where","ok","error","json","Error","message","getQuestion","questionId","getAnswer","requestId","saveAnswer","answer","userId","to","data","value","getProgress","updateAnswer","answerId","getFileAttachment","recordId","console","getAttachmentsForAnswer","uploadFileAttachment","fileName","fileContent","base64Content","File","buffer","arrayBuffer","btoa","String","fromCharCode","Uint8Array","downloadFileAttachment","url","_contentDisposition$s","contentDisposition","get","split","replace","content","text","deleteAttachment"],"sources":["/home/ben/lighthouse/work_requsts/frontend/src/config/quickbase.ts"],"sourcesContent":["// QuickBase API configuration\nconst QB_API_URL = 'https://api.quickbase.com/v1';\n\n// Headers for QuickBase API requests\nconst getHeaders = () => ({\n  'QB-Realm-Hostname': window.QUICKBASE_REALM,\n  'User-Agent': 'QuestionAnswerPlatform/1.0',\n  'Authorization': `QB-USER-TOKEN ${window.QUICKBASE_USER_TOKEN}`,\n  'Content-Type': 'application/json'\n});\n\n// Table IDs - Replace these with your actual QuickBase table IDs\nexport const TABLES = {\n  QUESTIONS: 'buzzze3pn',\n  ANSWERS: 'buzzzhvkj',\n  ATTACHMENTS: 'buz3i82er'\n};\n\n// Field IDs mapping by table\nexport const FIELDS = {\n  QUESTIONS: {\n    RECORD_ID: 3,\n    QUESTION: 6,\n    REQUIRED: 7,\n    FORM_ID: 10\n  },\n  ANSWERS: {\n    RECORD_ID: 3,\n    QUESTION_ID: 10,\n    ANSWER: 6,\n    USER_ID: 7,\n    USER_EMAIL: 8,\n    REQUEST_ID: 12,\n  },\n  ATTACHMENTS: {\n    RECORD_ID: 3,\n    ANSWER_ID: 6,\n    FILE_ATTACHMENT: 7\n  }\n};\n\n// Types for file attachment data\ninterface FileVersion {\n  versionNumber: number;\n  fileName: string;\n  uploaded: string;\n  creator: {\n    email: string;\n    id: string;\n    name: string;\n    userName: string;\n  };\n}\n\ninterface FileAttachment {\n  url: string;\n  reservedBy?: {\n    email: string;\n    id: string;\n    name: string;\n    userName: string;\n  };\n  versions: FileVersion[];\n}\n\ninterface FileAttachmentValue {\n  value: FileAttachment;\n}\n\ninterface Attachment {\n  record_id: number;\n  [key: number]: {\n    value: number | {\n      url: string;\n      versions: Array<{\n        creator: {\n          email: string;\n          id: string;\n          name: string;\n          userName: string;\n        };\n        fileName: string;\n        uploaded: string;\n        versionNumber: number;\n      }>;\n    };\n  };\n}\n\n// API functions\nexport const api = {\n  // Get all active questions for a specific form\n  getQuestions: async (formId: string) => {\n    const response = await fetch(`${QB_API_URL}/records/query`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        from: TABLES.QUESTIONS,\n        select: [FIELDS.QUESTIONS.RECORD_ID, FIELDS.QUESTIONS.QUESTION, FIELDS.QUESTIONS.REQUIRED],\n        where: `{${FIELDS.QUESTIONS.FORM_ID}.EX.'${formId}'}`\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch questions');\n    }\n\n    return response.json();\n  },\n\n  // Get a single question\n  getQuestion: async (questionId: string) => {\n    const response = await fetch(`${QB_API_URL}/records/query`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        from: TABLES.QUESTIONS,\n        select: [FIELDS.QUESTIONS.RECORD_ID, FIELDS.QUESTIONS.QUESTION, FIELDS.QUESTIONS.REQUIRED],\n        where: `{${FIELDS.QUESTIONS.RECORD_ID}.EX.'${questionId}'}`\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch question');\n    }\n\n    return response.json();\n  },\n\n  // Get an answer for a specific question and request\n  getAnswer: async (questionId: string, requestId: string) => {\n    const response = await fetch(`${QB_API_URL}/records/query`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        from: TABLES.ANSWERS,\n        select: [FIELDS.ANSWERS.RECORD_ID, FIELDS.ANSWERS.ANSWER, FIELDS.ANSWERS.USER_EMAIL, FIELDS.ANSWERS.USER_ID],\n        where: `{${FIELDS.ANSWERS.QUESTION_ID}.EX.'${questionId}'}AND{${FIELDS.ANSWERS.REQUEST_ID}.EX.'${requestId}'}`\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch answer');\n    }\n\n    return response.json();\n  },\n\n  // Save an answer\n  saveAnswer: async (questionId: string, answer: string, userId: string, requestId: string) => {\n    const response = await fetch(`${QB_API_URL}/records`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        to: TABLES.ANSWERS,\n        data: [{\n          [FIELDS.ANSWERS.QUESTION_ID]: { value: questionId },\n          [FIELDS.ANSWERS.ANSWER]: { value: answer },\n          [FIELDS.ANSWERS.USER_ID]: { value: userId },\n          [FIELDS.ANSWERS.REQUEST_ID]: { value: requestId }\n        }]\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to save answer');\n    }\n\n    return response.json();\n  },\n\n  // Get user's progress\n  getProgress: async (requestId: string) => {\n    const response = await fetch(`${QB_API_URL}/records/query`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        from: TABLES.ANSWERS,\n        select: [FIELDS.ANSWERS.ANSWER, FIELDS.ANSWERS.QUESTION_ID],\n        where: `{${FIELDS.ANSWERS.REQUEST_ID}.EX.'${requestId}'}`\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch progress');\n    }\n\n    return response.json();\n  },\n\n  // Update an existing answer\n  updateAnswer: async (answerId: string, answer: string, userId: string, requestId: string) => {\n    const response = await fetch(`${QB_API_URL}/records`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        to: TABLES.ANSWERS,\n        data: [{\n          [FIELDS.ANSWERS.RECORD_ID]: { value: answerId },\n          [FIELDS.ANSWERS.ANSWER]: { value: answer },\n          [FIELDS.ANSWERS.USER_ID]: { value: userId },\n          [FIELDS.ANSWERS.REQUEST_ID]: { value: requestId }\n        }]\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to update answer');\n    }\n\n    return response.json();\n  },\n\n  // Get file attachment\n  getFileAttachment: async (recordId: number): Promise<FileAttachmentValue> => {\n    try {\n      const response = await fetch(`${QB_API_URL}/records/${TABLES.ATTACHMENTS}/${recordId}`, {\n        method: 'GET',\n        headers: getHeaders()\n      });\n      if (!response.ok) throw new Error('Failed to fetch file attachment');\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching file attachment:', error);\n      throw error;\n    }\n  },\n\n  // Get attachments for an answer\n  getAttachmentsForAnswer: async (answerId: number): Promise<{ data: Attachment[] }> => {\n    try {\n      const response = await fetch(`${QB_API_URL}/records/query`, {\n        method: 'POST',\n        headers: getHeaders(),\n        body: JSON.stringify({\n          from: TABLES.ATTACHMENTS,\n          select: [FIELDS.ATTACHMENTS.RECORD_ID, FIELDS.ATTACHMENTS.FILE_ATTACHMENT, 8],\n          where: `{${FIELDS.ATTACHMENTS.ANSWER_ID}.EX.'${answerId}'}`\n        })\n      });\n\n      if (!response.ok) throw new Error('Failed to fetch attachments');\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching attachments:', error);\n      throw error;\n    }\n  },\n\n  // Upload or update file attachment\n  uploadFileAttachment: async (answerId: number, fileName: string, fileContent: string | File, recordId?: number): Promise<void> => {\n    try {\n      // Convert file content to Base64 if it's a File object\n      let base64Content: string;\n      if (fileContent instanceof File) {\n        const buffer = await fileContent.arrayBuffer();\n        base64Content = btoa(String.fromCharCode(...new Uint8Array(buffer)));\n      } else {\n        base64Content = fileContent; // Assume it's already Base64 encoded if it's a string\n      }\n\n      const data = {\n        to: TABLES.ATTACHMENTS,\n        data: [{\n          ...(recordId && { [FIELDS.ATTACHMENTS.RECORD_ID]: { value: recordId } }),\n          [FIELDS.ATTACHMENTS.FILE_ATTACHMENT]: {\n            value: {\n              fileName,\n              data: base64Content\n            }\n          },\n          [FIELDS.ATTACHMENTS.ANSWER_ID]: { value: answerId }\n        }]\n      };\n\n      const response = await fetch(`${QB_API_URL}/records`, {\n        method: 'POST',\n        headers: getHeaders(),\n        body: JSON.stringify(data)\n      });\n\n      if (!response.ok) throw new Error('Failed to upload file attachment');\n    } catch (error) {\n      console.error('Error uploading file attachment:', error);\n      throw error;\n    }\n  },\n\n  // Download file attachment\n  downloadFileAttachment: async (url: string): Promise<{ fileName: string; content: string }> => {\n    try {\n      const response = await fetch(`${QB_API_URL}${url}`, {\n        method: 'GET',\n        headers: getHeaders()\n      });\n\n      if (!response.ok) throw new Error('Failed to download file attachment');\n\n      const contentDisposition = response.headers.get('Content-Disposition');\n      const fileName = contentDisposition?.split('filename=')[1]?.replace(/\"/g, '') || 'downloaded_file';\n\n      const content = await response.text(); // Base64 encoded content\n      return { fileName, content };\n    } catch (error) {\n      console.error('Error downloading file attachment:', error);\n      throw error;\n    }\n  },\n\n  // Delete an attachment\n  deleteAttachment: async (recordId: number) => {\n    const response = await fetch(`${QB_API_URL}/records`, {\n      method: 'DELETE',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        from: TABLES.ATTACHMENTS,\n        where: `{${FIELDS.ATTACHMENTS.RECORD_ID}.EX.'${recordId}'}`\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to delete attachment');\n    }\n\n    return response.json();\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}