{"ast":null,"code":"// QuickBase API configuration\nconst QB_API_URL = 'https://api.quickbase.com/v1';\n\n// Headers for QuickBase API requests\nconst getHeaders = () => ({\n  'QB-Realm-Hostname': window.QUICKBASE_REALM,\n  'User-Agent': 'QuestionAnswerPlatform/1.0',\n  'Authorization': `QB-USER-TOKEN ${window.QUICKBASE_USER_TOKEN}`,\n  'Content-Type': 'application/json'\n});\n\n// Table IDs - Replace these with your actual QuickBase table IDs\nexport const TABLES = {\n  QUESTIONS: 'buzzze3pn',\n  ANSWERS: 'buzzzhvkj',\n  ATTACHMENTS: 'buz3i82er'\n};\n\n// API functions\nexport const api = {\n  // Get all active questions\n  getQuestions: async () => {\n    const response = await fetch(`${QB_API_URL}/records/query`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        from: TABLES.QUESTIONS,\n        select: [3, 6, 7],\n        where: {\n          status: 'active'\n        }\n      })\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch questions');\n    }\n    return response.json();\n  },\n  // Get a single question\n  getQuestion: async questionId => {\n    const response = await fetch(`${QB_API_URL}/records/query`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        from: TABLES.QUESTIONS,\n        select: ['question_id', 'question_text', 'question_type'],\n        where: {\n          question_id: questionId\n        }\n      })\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch question');\n    }\n    return response.json();\n  },\n  // Save an answer\n  saveAnswer: async (questionId, answer, userId) => {\n    const response = await fetch(`${QB_API_URL}/records`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        to: TABLES.ANSWERS,\n        data: [{\n          question_id: questionId,\n          answer_text: answer,\n          user_id: userId,\n          status: 'completed'\n        }]\n      })\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to save answer');\n    }\n    return response.json();\n  },\n  // Upload an attachment\n  uploadAttachment: async (answerId, file) => {\n    // First, create the attachment record\n    const createResponse = await fetch(`${QB_API_URL}/records`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        to: TABLES.ATTACHMENTS,\n        data: [{\n          answer_id: answerId,\n          file_name: file.name,\n          file_type: file.type,\n          file_size: file.size\n        }]\n      })\n    });\n    if (!createResponse.ok) {\n      const error = await createResponse.json();\n      throw new Error(error.message || 'Failed to create attachment record');\n    }\n    const {\n      data: [{\n        record_id\n      }]\n    } = await createResponse.json();\n\n    // Then, upload the file content\n    const fileContent = await file.arrayBuffer();\n    const uploadResponse = await fetch(`${QB_API_URL}/records`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        to: TABLES.ATTACHMENTS,\n        data: [{\n          record_id,\n          file_content: fileContent\n        }]\n      })\n    });\n    if (!uploadResponse.ok) {\n      const error = await uploadResponse.json();\n      throw new Error(error.message || 'Failed to upload file content');\n    }\n    return uploadResponse.json();\n  },\n  // Get user's progress\n  getProgress: async userId => {\n    const response = await fetch(`${QB_API_URL}/records/query`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        from: TABLES.ANSWERS,\n        select: ['question_id', 'status'],\n        where: {\n          user_id: userId\n        }\n      })\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch progress');\n    }\n    return response.json();\n  }\n};","map":{"version":3,"names":["QB_API_URL","getHeaders","window","QUICKBASE_REALM","QUICKBASE_USER_TOKEN","TABLES","QUESTIONS","ANSWERS","ATTACHMENTS","api","getQuestions","response","fetch","method","headers","body","JSON","stringify","from","select","where","status","ok","error","json","Error","message","getQuestion","questionId","question_id","saveAnswer","answer","userId","to","data","answer_text","user_id","uploadAttachment","answerId","file","createResponse","answer_id","file_name","name","file_type","type","file_size","size","record_id","fileContent","arrayBuffer","uploadResponse","file_content","getProgress"],"sources":["/home/ben/lighthouse/work_requsts/frontend/src/config/quickbase.ts"],"sourcesContent":["// QuickBase API configuration\nconst QB_API_URL = 'https://api.quickbase.com/v1';\n\n// Headers for QuickBase API requests\nconst getHeaders = () => ({\n  'QB-Realm-Hostname': window.QUICKBASE_REALM,\n  'User-Agent': 'QuestionAnswerPlatform/1.0',\n  'Authorization': `QB-USER-TOKEN ${window.QUICKBASE_USER_TOKEN}`,\n  'Content-Type': 'application/json'\n});\n\n// Table IDs - Replace these with your actual QuickBase table IDs\nexport const TABLES = {\n  QUESTIONS: 'buzzze3pn',\n  ANSWERS: 'buzzzhvkj',\n  ATTACHMENTS: 'buz3i82er'\n};\n\n// API functions\nexport const api = {\n  // Get all active questions\n  getQuestions: async () => {\n    const response = await fetch(`${QB_API_URL}/records/query`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        from: TABLES.QUESTIONS,\n        select: [3, 6, 7],\n        where: { status: 'active' }\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch questions');\n    }\n\n    return response.json();\n  },\n\n  // Get a single question\n  getQuestion: async (questionId: string) => {\n    const response = await fetch(`${QB_API_URL}/records/query`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        from: TABLES.QUESTIONS,\n        select: ['question_id', 'question_text', 'question_type'],\n        where: { question_id: questionId }\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch question');\n    }\n\n    return response.json();\n  },\n\n  // Save an answer\n  saveAnswer: async (questionId: string, answer: string, userId: string) => {\n    const response = await fetch(`${QB_API_URL}/records`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        to: TABLES.ANSWERS,\n        data: [{\n          question_id: questionId,\n          answer_text: answer,\n          user_id: userId,\n          status: 'completed'\n        }]\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to save answer');\n    }\n\n    return response.json();\n  },\n\n  // Upload an attachment\n  uploadAttachment: async (answerId: string, file: File) => {\n    // First, create the attachment record\n    const createResponse = await fetch(`${QB_API_URL}/records`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        to: TABLES.ATTACHMENTS,\n        data: [{\n          answer_id: answerId,\n          file_name: file.name,\n          file_type: file.type,\n          file_size: file.size\n        }]\n      })\n    });\n\n    if (!createResponse.ok) {\n      const error = await createResponse.json();\n      throw new Error(error.message || 'Failed to create attachment record');\n    }\n\n    const { data: [{ record_id }] } = await createResponse.json();\n\n    // Then, upload the file content\n    const fileContent = await file.arrayBuffer();\n    const uploadResponse = await fetch(`${QB_API_URL}/records`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        to: TABLES.ATTACHMENTS,\n        data: [{\n          record_id,\n          file_content: fileContent\n        }]\n      })\n    });\n\n    if (!uploadResponse.ok) {\n      const error = await uploadResponse.json();\n      throw new Error(error.message || 'Failed to upload file content');\n    }\n\n    return uploadResponse.json();\n  },\n\n  // Get user's progress\n  getProgress: async (userId: string) => {\n    const response = await fetch(`${QB_API_URL}/records/query`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        from: TABLES.ANSWERS,\n        select: ['question_id', 'status'],\n        where: { user_id: userId }\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to fetch progress');\n    }\n\n    return response.json();\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}